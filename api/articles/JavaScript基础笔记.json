{"title":"javascript基础","uid":"b9dfd556530770a74514e4f3a5fd8a27","slug":"JavaScript基础笔记","date":"2019-08-26T07:13:43.000Z","updated":"2021-04-07T08:42:39.452Z","comments":true,"path":"api/articles/JavaScript基础笔记.json","keywords":null,"cover":null,"content":"<h2 id=\"JavaScript：\"><a href=\"#JavaScript：\" class=\"headerlink\" title=\"JavaScript：\"></a>JavaScript：</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">*</span> 概念：\t一门客户端脚本语言\n\t<span class=\"token operator\">*</span> 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎\n\t<span class=\"token operator\">*</span> 脚本语言：不需要编译，直接就可以被浏览器解析执行了\n\n<span class=\"token operator\">*</span> 功能：\n\t<span class=\"token operator\">*</span> 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。\n\n<span class=\"token operator\">*</span> JavaScript发展史：\n\t<span class=\"token number\">1.</span> <span class=\"token number\">1992</span>年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： <span class=\"token constant\">C</span><span class=\"token operator\">--</span>\t，后来更名为：ScriptEase\n\t<span class=\"token number\">2.</span> <span class=\"token number\">1995</span><span class=\"token function\">年，Netscape</span><span class=\"token punctuation\">(</span>网景<span class=\"token punctuation\">)</span>公司，开发了一门客户端脚本语言：LiveScript。后来，请来<span class=\"token constant\">SUN</span>公司的专家，修改LiveScript，命名为JavaScript\n\t<span class=\"token number\">3.</span> <span class=\"token number\">1996</span>年，微软抄袭JavaScript开发出JScript语言\n\t<span class=\"token number\">4.</span> <span class=\"token number\">1997</span>年，<span class=\"token constant\">ECMA</span><span class=\"token punctuation\">(</span>欧洲计算机制造商协会<span class=\"token punctuation\">)</span>，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。\n\n\t<span class=\"token operator\">*</span> JavaScript <span class=\"token operator\">=</span> ECMAScript <span class=\"token operator\">+</span> <span class=\"token function\">JavaScript自己特有的东西</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BOM</span><span class=\"token operator\">+</span><span class=\"token constant\">DOM</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">*</span> ECMAScript：客户端脚本语言的标准\n\t<span class=\"token number\">1.</span> 基本语法：\n\t\t<span class=\"token number\">1.</span> 与html结合方式\n\t\t\t<span class=\"token number\">1.</span> 内部<span class=\"token constant\">JS</span>：\n\t\t\t\t<span class=\"token operator\">*</span> 定义<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>，标签体内容就是js代码\n\t\t\t<span class=\"token number\">2.</span> 外部<span class=\"token constant\">JS</span>：\n\t\t\t\t<span class=\"token operator\">*</span> 定义<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>，通过src属性引入外部的js文件\n\n\t\t\t<span class=\"token operator\">*</span> 注意：\n\t\t\t\t<span class=\"token number\">1.</span> <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。\n\t\t\t\t<span class=\"token number\">2.</span> <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>可以定义多个。\n\t\t<span class=\"token number\">2.</span> 注释\n\t\t\t<span class=\"token number\">1.</span> 单行注释：<span class=\"token comment\">//注释内容</span>\n\t\t\t<span class=\"token number\">2.</span> 多行注释：<span class=\"token comment\">/*注释内容*/</span>\n\t\t<span class=\"token number\">3.</span> 数据类型：\n\t\t\t<span class=\"token number\">1.</span> <span class=\"token function\">原始数据类型</span><span class=\"token punctuation\">(</span>基本数据类型<span class=\"token punctuation\">)</span>：\n\t\t\t\t<span class=\"token number\">1.</span> number：数字。 整数<span class=\"token operator\">/</span>小数<span class=\"token operator\">/</span><span class=\"token function\">NaN</span><span class=\"token punctuation\">(</span>not a number 一个不是数字的数字类型<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token number\">2.</span> string：字符串。 字符串  <span class=\"token string\">\"abc\"</span> <span class=\"token string\">\"a\"</span> <span class=\"token string\">'abc'</span>\n\t\t\t\t<span class=\"token number\">3.</span> boolean<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>和<span class=\"token boolean\">false</span>\n\t\t\t\t<span class=\"token number\">4.</span> <span class=\"token keyword\">null</span>：一个对象为空的占位符\n\t\t\t\t<span class=\"token number\">5.</span> <span class=\"token keyword\">undefined</span>：未定义。如果一个变量没有给初始化值，则会被默认赋值为<span class=\"token keyword\">undefined</span>\n\t\t\t\t\n\t\t\t<span class=\"token number\">2.</span> 引用数据类型：对象\n\t\t\t\n\t\t<span class=\"token number\">4.</span> 变量\n\t\t\t<span class=\"token operator\">*</span> 变量：一小块存储数据的内存空间\n\t\t\t<span class=\"token operator\">*</span> Java语言是强类型语言，而JavaScript是弱类型语言。\n\t\t\t\t<span class=\"token operator\">*</span> 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据\n\t\t\t\t<span class=\"token operator\">*</span> 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。\n\t\t\t<span class=\"token operator\">*</span> 语法：\n\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">var</span> 变量名 <span class=\"token operator\">=</span> 初始化值<span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">typeof</span>运算符：获取变量的类型。\n\t\t\t\t<span class=\"token operator\">*</span> 注：<span class=\"token keyword\">null</span>运算后得到的是object\n\t\t<span class=\"token number\">5.</span> 运算符\n\t\t\t<span class=\"token number\">1.</span> 一元运算符：只有一个运算数的运算符\n\t\t\t\t<span class=\"token operator\">++</span>，<span class=\"token operator\">--</span> ， <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>正号<span class=\"token punctuation\">)</span>  \n\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token operator\">++</span> <span class=\"token operator\">--</span><span class=\"token operator\">:</span> <span class=\"token function\">自增</span><span class=\"token punctuation\">(</span>自减<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token function\">在前，先自增</span><span class=\"token punctuation\">(</span>自减<span class=\"token punctuation\">)</span>，再运算\n\t\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token function\">在后，先运算，再自增</span><span class=\"token punctuation\">(</span>自减<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token punctuation\">)</span>：正负号\n\t\t\t    <span class=\"token operator\">*</span> 注意：在<span class=\"token constant\">JS</span>中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换\n                    <span class=\"token operator\">*</span> 其他类型转number：\n                        <span class=\"token operator\">*</span> string转number：按照字面值转换。如果字面值不是数字，则转为<span class=\"token number\">NaN</span>（不是数字的数字）\n                        <span class=\"token operator\">*</span> boolean转number：<span class=\"token boolean\">true</span>转为<span class=\"token number\">1</span>，<span class=\"token boolean\">false</span>转为<span class=\"token number\">0</span>\n\t\t\t<span class=\"token number\">2.</span> 算数运算符\n\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token operator\">*</span> <span class=\"token operator\">/</span> <span class=\"token operator\">%</span> <span class=\"token operator\">...</span>\n\n\t\t\t<span class=\"token number\">3.</span> 赋值运算符\n\t\t\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">+=</span> <span class=\"token operator\">-</span><span class=\"token operator\">+</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span>\n\n\t\t\t<span class=\"token number\">4.</span> 比较运算符\n\t\t\t\t<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">>=</span> <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">==</span> <span class=\"token operator\">===</span><span class=\"token punctuation\">(</span>全等于<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">*</span> 比较方式\n                  <span class=\"token number\">1.</span> 类型相同：直接比较\n                      <span class=\"token operator\">*</span> 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。\n                  <span class=\"token number\">2.</span> 类型不同：先进行类型转换，再比较\n                      <span class=\"token operator\">*</span> <span class=\"token operator\">===</span>：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回<span class=\"token boolean\">false</span>\n\t\t\t<span class=\"token number\">5.</span> 逻辑运算符\n\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>\n\t\t\t\t<span class=\"token operator\">*</span> 其他类型转boolean：\n                   <span class=\"token number\">1.</span> number：<span class=\"token number\">0</span>或<span class=\"token number\">NaN</span>为假，其他为真\n                   <span class=\"token number\">2.</span> <span class=\"token function\">string：除了空字符串</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>，其他都是<span class=\"token boolean\">true</span>\n                   <span class=\"token number\">3.</span> <span class=\"token keyword\">null</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">:</span>都是<span class=\"token boolean\">false</span>\n                   <span class=\"token number\">4.</span> 对象：所有对象都为<span class=\"token boolean\">true</span>\n\t\t\t\n\t\t\t<span class=\"token number\">6.</span> 三元运算符\n\t\t\t\t<span class=\"token operator\">?</span> <span class=\"token operator\">:</span> 表达式\n\t\t\t\t<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t\t        <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t        <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token operator\">*</span> 语法：\n\t\t\t\t\t<span class=\"token operator\">*</span> 表达式<span class=\"token operator\">?</span> 值<span class=\"token number\">1</span><span class=\"token operator\">:</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token operator\">*</span> 判断表达式的值，如果是<span class=\"token boolean\">true</span>则取值<span class=\"token number\">1</span>，如果是<span class=\"token boolean\">false</span>则取值<span class=\"token number\">2</span>；\n\t\t\t\n\t\t<span class=\"token number\">6.</span> 流程控制语句：\n\t\t\t<span class=\"token number\">1.</span> <span class=\"token keyword\">if</span><span class=\"token operator\">...</span><span class=\"token keyword\">else</span><span class=\"token operator\">...</span>\n\t\t\t<span class=\"token number\">2.</span> <span class=\"token keyword\">switch</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token operator\">*</span> 在java中，<span class=\"token keyword\">switch</span>语句可以接受的数据类型： byte int shor char<span class=\"token punctuation\">,</span><span class=\"token function\">枚举</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.7</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>变量<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n\t\t\t\t\t\t<span class=\"token keyword\">case</span> 值<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token operator\">*</span> 在<span class=\"token constant\">JS</span>中<span class=\"token punctuation\">,</span><span class=\"token keyword\">switch</span>语句可以接受任意的原始数据类型\n\t\t\t<span class=\"token number\">3.</span> <span class=\"token keyword\">while</span>\n\t\t\t<span class=\"token number\">4.</span> <span class=\"token keyword\">do</span><span class=\"token operator\">...</span><span class=\"token keyword\">while</span>\n\t\t\t<span class=\"token number\">5.</span> <span class=\"token keyword\">for</span>\n\t\t<span class=\"token number\">7.</span> <span class=\"token constant\">JS</span>特殊语法：\n\t\t\t<span class=\"token number\">1.</span> 语句以<span class=\"token punctuation\">;</span>结尾，如果一行只有一条语句则 <span class=\"token punctuation\">;</span><span class=\"token function\">可以省略</span> <span class=\"token punctuation\">(</span>不建议<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token number\">2.</span> 变量的定义使用<span class=\"token keyword\">var</span>关键字，也可以不使用\n        \t\t<span class=\"token operator\">*</span> 用： 定义的变量是局部变量\n                <span class=\"token operator\">*</span> <span class=\"token function\">不用：定义的变量是全局变量</span><span class=\"token punctuation\">(</span>不建议<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token number\">8.</span> 练习：<span class=\"token number\">99</span>乘法表\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n\t\t    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span>\n\t\t    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token number\">99</span>乘法表<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n\t\t    <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span>\n\t\t        td<span class=\"token punctuation\">&#123;</span>\n\t\t            border<span class=\"token operator\">:</span> <span class=\"token number\">1</span>px solid<span class=\"token punctuation\">;</span>\n\t\t        <span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span>\n\t\t\n\t\t    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\t\t\n\t\t        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;table  align='center'>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t        <span class=\"token comment\">//1.完成基本的for循环嵌套，展示乘法表</span>\n\t\t        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;tr>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span>i <span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t                document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;td>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t                <span class=\"token comment\">//输出  1 * 1 = 1</span>\n\t\t                document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" * \"</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">*</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\"&amp;nbsp;&amp;nbsp;&amp;nbsp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t                document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/td>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t            <span class=\"token punctuation\">&#125;</span>\n\t\t            <span class=\"token comment\">/*//输出换行\n\t\t            document.write(\"&lt;br>\");*/</span>\n\t\t\n\t\t            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/tr>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t        <span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t        <span class=\"token comment\">//2.完成表格嵌套</span>\n\t\t        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/table>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n\t\t\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n\n\t<span class=\"token number\">2.</span> 基本对象：\n\t\t<span class=\"token number\">1.</span> <span class=\"token function\">Function：函数</span><span class=\"token punctuation\">(</span>方法<span class=\"token punctuation\">)</span>对象\n            <span class=\"token number\">1.</span> 创建：\n                <span class=\"token number\">1.</span> <span class=\"token keyword\">var</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>形式参数列表<span class=\"token punctuation\">,</span>方法体<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//忘掉吧</span>\n                <span class=\"token number\">2.</span> \n                    <span class=\"token keyword\">function</span> <span class=\"token function\">方法名称</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">形式参数列表</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        方法体\n                    <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token number\">3.</span> \n                   <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">方法名</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">形式参数列表</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                        方法体\n                   <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token number\">2.</span> 方法：\n\n            <span class=\"token number\">3.</span> 属性：\n                length<span class=\"token operator\">:</span>代表形参的个数\n            <span class=\"token number\">4.</span> 特点：\n                <span class=\"token number\">1.</span> 方法定义是，形参的类型不用写<span class=\"token punctuation\">,</span>返回值类型也不写。\n                <span class=\"token number\">2.</span> 方法是一个对象，如果定义名称相同的方法，会覆盖\n                <span class=\"token number\">3.</span> 在<span class=\"token constant\">JS</span>中，方法的调用只与方法的名称有关，和参数列表无关\n                <span class=\"token number\">4.</span> 在方法声明中有一个隐藏的内置对象（数组），arguments<span class=\"token punctuation\">,</span>封装所有的实际参数\n            <span class=\"token number\">5.</span> 调用：\n                <span class=\"token function\">方法名称</span><span class=\"token punctuation\">(</span>实际参数列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token number\">2.</span> Array<span class=\"token operator\">:</span>数组对象\n            <span class=\"token number\">1.</span> 创建：\n                <span class=\"token number\">1.</span> <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>元素列表<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token number\">2.</span> <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>默认长度<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token number\">3.</span> <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>元素列表<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token number\">2.</span> 方法\n                <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>将数组中的元素按照指定的分隔符拼接为字符串\n                <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t向数组的末尾添加一个或更多元素，并返回新的长度。\n            <span class=\"token number\">3.</span> 属性\n                length<span class=\"token operator\">:</span>数组的长度\n            <span class=\"token number\">4.</span> 特点：\n                <span class=\"token number\">1.</span> <span class=\"token constant\">JS</span>中，数组元素的类型可变的。\n                <span class=\"token number\">2.</span> <span class=\"token constant\">JS</span>中，数组长度可变的。\n\t\t<span class=\"token number\">3.</span> Boolean\n\t\t<span class=\"token number\">4.</span> Date：日期对象\n            <span class=\"token number\">1.</span> 创建：\n                <span class=\"token keyword\">var</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token number\">2.</span> 方法：\n                <span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>：返回当前date对象对应的时间本地字符串格式\n                <span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>获取毫秒值。返回当前如期对象描述的时间到<span class=\"token number\">1970</span>年<span class=\"token number\">1</span>月<span class=\"token number\">1</span>日零点的毫秒值差\n\t\t<span class=\"token number\">5.</span> Math：数学对象\n            <span class=\"token number\">1.</span> 创建：\n                <span class=\"token operator\">*</span> 特点：Math对象不用创建，直接使用。  Math<span class=\"token punctuation\">.</span><span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token number\">2.</span> 方法：\n                <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>返回 <span class=\"token number\">0</span> <span class=\"token operator\">~</span> <span class=\"token number\">1</span> 之间的随机数。 含<span class=\"token number\">0</span>不含<span class=\"token number\">1</span>\n                <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>：对数进行上舍入。\n                <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>：对数进行下舍入。\n                <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>：把数四舍五入为最接近的整数。\n            <span class=\"token number\">3.</span> 属性：\n                <span class=\"token constant\">PI</span>\n\t\t<span class=\"token number\">6.</span> Number\n\t\t<span class=\"token number\">7.</span> String\n\t\t<span class=\"token number\">8.</span> RegExp：正则表达式对象\n\t\t\t<span class=\"token number\">1.</span> 正则表达式：定义字符串的组成规则。\n\t\t\t\t<span class=\"token number\">1.</span> 单个字符<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\t\t\t\t\t如： <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ab<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>_<span class=\"token punctuation\">]</span>\n\t\t\t\t\t<span class=\"token operator\">*</span> 特殊符号代表特殊含义的单个字符<span class=\"token operator\">:</span>\n\t\t\t\t\t\t\\d<span class=\"token operator\">:</span>单个数字字符 <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n\t\t\t\t\t\t\\w<span class=\"token operator\">:</span>单个单词字符<span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>_<span class=\"token punctuation\">]</span>\n\t\t\t\t<span class=\"token number\">2.</span> 量词符号：\n\t\t\t\t\t<span class=\"token operator\">?</span>：表示出现<span class=\"token number\">0</span>次或<span class=\"token number\">1</span>次\n\t\t\t\t\t<span class=\"token operator\">*</span>：表示出现<span class=\"token number\">0</span>次或多次\n\t\t\t\t\t<span class=\"token operator\">+</span>：出现<span class=\"token number\">1</span>次或多次\n\t\t\t\t\t<span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span>表示 m<span class=\"token operator\">&lt;=</span> 数量 <span class=\"token operator\">&lt;=</span> n\n\t\t\t\t\t\t<span class=\"token operator\">*</span> m如果缺省： <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">:</span>最多n次\n\t\t\t\t\t\t<span class=\"token operator\">*</span> n如果缺省：<span class=\"token punctuation\">&#123;</span>m<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span> 最少m次\n\t\t\t\t<span class=\"token number\">3.</span> 开始结束符号\n\t\t\t\t\t<span class=\"token operator\">*</span> <span class=\"token operator\">^</span><span class=\"token operator\">:</span>开始\n\t\t\t\t\t<span class=\"token operator\">*</span> $<span class=\"token operator\">:</span>结束\n\t\t\t<span class=\"token number\">2.</span> 正则对象：\n\t\t\t\t<span class=\"token number\">1.</span> 创建\n\t\t\t\t\t<span class=\"token number\">1.</span> <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正则表达式\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token number\">2.</span> <span class=\"token keyword\">var</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">正则表达式</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token number\">2.</span> 方法\t\n\t\t\t\t\t<span class=\"token number\">1.</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>验证指定的字符串是否符合正则定义的规范\t\n\t\t<span class=\"token number\">9.</span> Global\n\t\t\t<span class=\"token number\">1.</span> 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  <span class=\"token function\">方法名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token number\">2.</span> 方法：\n\t\t\t    <span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>url编码\n\t\t\t    <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>url解码\n\n\t\t\t    <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>url编码<span class=\"token punctuation\">,</span>编码的字符更多\n\t\t\t    <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>url解码\n\n\t\t\t    <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>将字符串转为数字\n\t\t\t        <span class=\"token operator\">*</span> 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number\n\t\t\t    <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>判断一个值是否是<span class=\"token number\">NaN</span>\n\t\t\t        <span class=\"token operator\">*</span> <span class=\"token number\">NaN</span>六亲不认，连自己都不认。<span class=\"token number\">NaN</span>参与的<span class=\"token operator\">==</span>比较全部问<span class=\"token boolean\">false</span>\n\n\t\t\t    <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>讲 JavaScript 字符串，并把它作为脚本代码来执行。\n            <span class=\"token number\">3.</span> <span class=\"token constant\">URL</span>编码\n               传智播客 <span class=\"token operator\">=</span>  <span class=\"token operator\">%</span><span class=\"token constant\">E4</span><span class=\"token operator\">%</span><span class=\"token constant\">BC</span><span class=\"token operator\">%</span><span class=\"token constant\">A0</span><span class=\"token operator\">%</span><span class=\"token constant\">E6</span><span class=\"token operator\">%</span><span class=\"token number\">99</span><span class=\"token operator\">%</span><span class=\"token constant\">BA</span><span class=\"token operator\">%</span><span class=\"token constant\">E6</span><span class=\"token operator\">%</span><span class=\"token number\">92</span><span class=\"token operator\">%</span><span class=\"token constant\">AD</span><span class=\"token operator\">%</span><span class=\"token constant\">E5</span><span class=\"token operator\">%</span><span class=\"token constant\">AE</span><span class=\"token operator\">%</span><span class=\"token constant\">A2</span>\n\n<span class=\"token operator\">*</span> <span class=\"token constant\">BOM</span>\n\n<span class=\"token operator\">*</span> <span class=\"token constant\">DOM</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<p>​    </p>\n","feature":null,"text":"JavaScript：* 概念： 一门客户端脚本语言 * 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎 * 脚本语言：不需要编译，直接就可以被浏览器解析执行了 * 功能： * 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript%EF%BC%9A\"><span class=\"toc-text\">JavaScript：</span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"html&css","uid":"ca61c2382a0ab3412965cfacf70e7f7f","slug":"HTML&CSS课堂笔记","date":"2019-08-26T11:14:23.000Z","updated":"2021-04-07T08:42:09.855Z","comments":true,"path":"api/articles/HTML&CSS课堂笔记.json","keywords":null,"cover":null,"text":"HTML标签：表单标签* 表单： * 概念：用于采集用户输入的数据的。用于和服务器进行交互。 * form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围 * 属性： * action：指定提交数据的URL * method:指定提交方式 * 分类：一共7种，2种比...","link":"","photos":[],"count_time":{"symbolsCount":"9.6k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java高级","uid":"b60ec295ef5609360b5e4f746898908f","slug":"Java高级","date":"2018-12-03T02:03:26.000Z","updated":"2021-04-26T02:25:08.190Z","comments":true,"path":"api/articles/Java高级.json","keywords":null,"cover":null,"text":"标准类制作 成员变量 ​ 使用private修饰 构造方法 提供一个无参构造方法 提供一个带多个参数的构造方法 成员方法 提供每一个成员变量对应的setXxx( )/getXxx( ) 提供一个显示对象信息的show（） 创建对象并对其成员变量赋值的两种方式t 无参构造方法创建对...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}