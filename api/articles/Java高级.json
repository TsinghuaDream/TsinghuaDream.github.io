{"title":"Java高级","uid":"b60ec295ef5609360b5e4f746898908f","slug":"Java高级","date":"2018-12-03T02:03:26.000Z","updated":"2021-04-26T02:25:08.190Z","comments":true,"path":"api/articles/Java高级.json","keywords":null,"cover":null,"content":"<h1 id=\"标准类制作\"><a href=\"#标准类制作\" class=\"headerlink\" title=\"标准类制作\"></a>标准类制作</h1><ol>\n<li><p>成员变量</p>\n<ul>\n<li>​    使用private修饰</li>\n</ul>\n</li>\n<li><p>构造方法</p>\n<ul>\n<li>提供一个无参构造方法</li>\n<li>提供一个带多个参数的构造方法</li>\n</ul>\n</li>\n<li><p>成员方法</p>\n<ul>\n<li>提供每一个成员变量对应的setXxx( )/getXxx( )</li>\n<li>提供一个显示对象信息的show（）</li>\n</ul>\n</li>\n<li><p>创建对象并对其成员变量赋值的两种方式t</p>\n<ul>\n<li>无参构造方法创建对象后使用setXxx( )赋值</li>\n<li>使用带参构造方法直接创建带有属性值的对象    </li>\n</ul>\n</li>\n</ol>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><p>编程的时候如果要存储多个数据，使用<strong>长度固定的数组存储格式，不一定满足我们的需求</strong>，更适应不了变化的需求。所以集合应运而生！</p>\n<p><strong>集合的接口们：</strong>Collection,List,Set,泛型，Map,Collections;</p>\n<p>集合：<strong>Collection</strong>–&gt; <strong>List</strong>–&gt;ArrayList,LinkedList…</p>\n<p>​                                    <strong>Set</strong>–&gt;HashSet,TreeSet…</p>\n<p>​                <strong>Map</strong>     –&gt;HashMap…</p>\n<p><strong>Collection集合概述</strong> </p>\n<p>​    是单例集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素 </p>\n<p>​    JDK 不提供此接口的任何直接实现，它提供更具体的子接口（如Set和List）实现 </p>\n<p><strong>创建Collection集合的对象</strong> </p>\n<p>​    多态的方式 </p>\n<p>​    具体的实现类ArrayList</p>\n<p>Collection集合常用方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>boolean add(E e)</td>\n<td>添加元素</td>\n</tr>\n<tr>\n<td>boolean remove(Object o)</td>\n<td>从集合中移除指定的元素</td>\n</tr>\n<tr>\n<td>void clear()</td>\n<td>清空集合中的元素</td>\n</tr>\n<tr>\n<td>boolean contains(Object o)</td>\n<td>判断集合中是否存在指定的元素</td>\n</tr>\n<tr>\n<td>boolean isEmpty()</td>\n<td>判断集合是否为空</td>\n</tr>\n<tr>\n<td>int size()</td>\n<td>集合的长度，也就是集合中元素的个数</td>\n</tr>\n</tbody></table>\n<p><strong>集合类的特点</strong>：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变。</p>\n<p><strong>泛型：可以改变存储的数据类型，使代码更加灵活</strong></p>\n<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//创建一个空的集合对象</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将指定的元素追加到此集合到末尾</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在此集合中的指定位置插入指定的元素</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除指定索引处的元素，返回被删除的元素</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//删除指定索引处的元素，返回被删除的元素</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//修改指定索引处的元素，返回被修改的元素</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回指定索引处的元素</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回集合中的元素的个数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"修饰符-权限修饰符-状态修饰符\"><a href=\"#修饰符-权限修饰符-状态修饰符\" class=\"headerlink\" title=\"修饰符(权限修饰符/状态修饰符)\"></a>修饰符(权限修饰符/状态修饰符)</h1><p>private：同一类中 </p>\n<p>默认 ：同一包中</p>\n<p>protected ：不同包的子类</p>\n<p>public：公开</p>\n<p>final和static </p>\n<p>final 关键字是最终的意思，可以修饰成员方法，成员变量，类 </p>\n<p>final 修饰的特点</p>\n<p>修饰方法：表明该方法是最终方法，不能被重写 </p>\n<p>修饰变量：表明该变量是常量，不能再次被赋值 </p>\n<p>修饰类：表明该类是最终类，不能被继承</p>\n<p>static关键字表明<strong>被类的所有对象共享</strong>，<strong>可以通过类名调用</strong></p>\n<h1 id=\"多态（同一对象，在不同时刻表现出来的不同形态）\"><a href=\"#多态（同一对象，在不同时刻表现出来的不同形态）\" class=\"headerlink\" title=\"多态（同一对象，在不同时刻表现出来的不同形态）\"></a>多态（同一对象，在不同时刻表现出来的不同形态）</h1><p>举例：猫 </p>\n<p>我们可以说猫是猫：猫 cat = new 猫(); </p>\n<p>我们也可以说猫是动物：动物 animal = new 猫(); </p>\n<p>这里猫在不同的时刻表现出来了不同的形态，这就是多态</p>\n<p><strong>多态的前提：有继承/实现关系 有方法重写 有父类引用指向子类对象</strong></p>\n<p><strong>多态中成员访问特点</strong>：</p>\n<p><u>成员变量：编译看左边，执行看左边</u> </p>\n<p><u>成员方法：编译看左边，执行看右边</u> </p>\n<p>为什么成员变量和成员方法的访问不一样呢？ 因为成员方法有重写，而成员变量没有</p>\n<p><strong>多态的利弊：</strong></p>\n<p>多态的好处：提高了程序的扩展性 具体体现：定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作 多态的弊端：不能使用子类的特有功能</p>\n<p><strong>多态的转型：</strong></p>\n<ul>\n<li>向上转型 从子到父 父类引用指向子类对象 </li>\n<li>向下转型 从父到子 父类引用转为子类对象</li>\n</ul>\n<h1 id=\"抽象类和接口\"><a href=\"#抽象类和接口\" class=\"headerlink\" title=\"抽象类和接口\"></a>抽象类和接口</h1><p>在Java中，<strong>一个没有方法体的方法应该定义为抽象方法</strong>，<strong>而类中如果有抽象方法，该类必须定义为抽象类</strong></p>\n<p><strong>抽象类特点：</strong></p>\n<p><strong><u>抽象类和抽象方法必须使用</u> <u>abstract</u> <u>关键字修饰</u></strong></p>\n<p><strong><u>抽象类中不一定有抽象方法</u>，<u>有抽象方法的类一定是抽象类</u></strong></p>\n<p><strong>抽象类不能实例化 抽象类如何实例化呢？<u>参照多态的方式，通过子类对象实例化，这叫抽象类多态</u></strong></p>\n<p><strong>抽象类的子类 要么重写抽象类中的所有抽象方法 要么是抽象类</strong></p>\n<hr>\n<p>接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用 Java中的接口更多的体现在对行为的抽象</p>\n<p><strong>接口特点：</strong></p>\n<p>接口用关键字interface修饰 </p>\n<p>​    public interface 接口名 {}  </p>\n<p>类实现接口用implements表示 </p>\n<p>​    public class 类名 implements 接口名 {} </p>\n<p>接口不能实例化 </p>\n<p>接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。 </p>\n<p>多态的形式：具体类多态，抽象类多态，接口多态。  </p>\n<p>多态的前提：有继承或者实现关系；有方法重写；有父(类/接口)引用指向(子/实现)类对象 </p>\n<p><strong><u>接口的子类 要么重写接口中的所有抽象方法 要么是抽象类</u></strong></p>\n<hr>\n<p><strong>抽象类和接口的区别：</strong></p>\n<p><strong>成员区别</strong> </p>\n<p>​    抽象类     变量,常量；有构造方法；有抽象方法,也有非抽象方法 </p>\n<p>​    接口         常量；抽象方法 </p>\n<p><strong>关系区别</strong> </p>\n<p>​    类与类         继承，单继承 </p>\n<p>​    类与接口     实现，可以单实现，也可以多实现 </p>\n<p>​    接口与接口     继承，单继承，多继承 </p>\n<p><strong>设计理念区别</strong> </p>\n<p>​    抽象类     对类抽象，包括属性、行为 </p>\n<p>​    接口         对行为抽象，主要是行为</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*案例*/</span>\n<span class=\"token comment\">//抽象类</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Door</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//接口  </span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Door</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//例子</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Alram</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">void</span> <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Door</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmDoor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Door</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Alarm</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">oepn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//....</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//....</span>\n     <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//....</span>\n     <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"形参和返回值注意事项\"><a href=\"#形参和返回值注意事项\" class=\"headerlink\" title=\"形参和返回值注意事项\"></a>形参和返回值注意事项</h1><ul>\n<li>类名作为形参和返回值<ul>\n<li>方法的形参是类名，其实需要的是该类的对象 </li>\n<li>方法的返回值是类名，其实返回的是该类的对象</li>\n</ul>\n</li>\n<li>抽象类名作为形参和返回值<ul>\n<li>方法的形参上抽象类名，其实需要的是该抽象类的子类对象</li>\n<li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li>\n</ul>\n</li>\n<li>接口名作为形参和返回值<ul>\n<li>方法的形参是接口名，其实需要的是该接口的实现类对象</li>\n<li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Some-question内部类（就是在一个类中定义一个类。）\"><a href=\"#Some-question内部类（就是在一个类中定义一个类。）\" class=\"headerlink\" title=\"Some question内部类（就是在一个类中定义一个类。）\"></a>Some question内部类（就是在一个类中定义一个类。）</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span> <span class=\"token punctuation\">&#123;</span>\n  \n      <span class=\"token punctuation\">&#125;</span> \t\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>内部类的访问特点</strong>:内部类可以直接访问外部类的成员，包括私有;外部类要访问内部类的成员，必须创建对象</p>\n<p><strong>内部类的分类：</strong></p>\n<p><strong>成员内部类；局部内部类；匿名内部类。</strong></p>\n<p>在类的成员位置：成员内部类，外界创建对象使用成员内部类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//外部类名.内部类名 对象名 = 外部类对象.内部类对象;</span>\n<span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inner</span> oi <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在类的局部位置：局部内部类 ;</p>\n<p>局部内部类是在方法中定义的类，所以外界是无法直接使用，需要在方法内部创建对象并使用 该类可以直接访问外部类的成员，也可以访问方法内的局部变量。</p>\n<p>匿名</p>\n<h1 id=\"常用API-Math-System-Object-Arrays-基本类型包装类-日期类-常用的工具类的设计思想：构造方法私有。成员都用static修饰。\"><a href=\"#常用API-Math-System-Object-Arrays-基本类型包装类-日期类-常用的工具类的设计思想：构造方法私有。成员都用static修饰。\" class=\"headerlink\" title=\"常用API (Math System Object Arrays 基本类型包装类 日期类)常用的工具类的设计思想：构造方法私有。成员都用static修饰。\"></a>常用API (Math System Object Arrays 基本类型包装类 日期类)常用的工具类的设计思想：构造方法私有。成员都用static修饰。</h1><h2 id=\"Math-类概述：\"><a href=\"#Math-类概述：\" class=\"headerlink\" title=\"Math 类概述：\"></a><strong>Math 类概述</strong>：</h2><p>Math 包含执行基本数字运算的方法 没有构造方法，如何使用类中的成员呢？ 看类的成员是否都是静态的，如果是，通过类名就可以直接调用</p>\n<p>Math类的常用方法：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法名</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">public static int abs(int a)</td>\n<td align=\"left\">返回参数的绝对值</td>\n</tr>\n<tr>\n<td align=\"left\">public static double ceil(double a)</td>\n<td align=\"left\">返回大于或等于参数的最小double值，等于一个整数</td>\n</tr>\n<tr>\n<td align=\"left\">public static double floor(double a)</td>\n<td align=\"left\">返回小于或等于参数的最大double值，等于一个整数</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>public static int round(float a)</strong></td>\n<td align=\"left\">按照四舍五入返回最接近参数的int</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>public static int max(int a,int b)</strong></td>\n<td align=\"left\">返回两个int值中的较大值</td>\n</tr>\n<tr>\n<td align=\"left\">public static int min(int a,int b)</td>\n<td align=\"left\">返回两个int值中的较小值</td>\n</tr>\n<tr>\n<td align=\"left\">public static double pow(double a,double b)</td>\n<td align=\"left\">返回a的b次幂的值</td>\n</tr>\n<tr>\n<td align=\"left\">public static double random()</td>\n<td align=\"left\">返回值为double的正值，[0.0,1.0)</td>\n</tr>\n</tbody></table>\n<h2 id=\"System类概述：\"><a href=\"#System类概述：\" class=\"headerlink\" title=\"System类概述：\"></a><strong>System类概述：</strong></h2><p>System包含几个有用的类字段和方法，它不能被实例化</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public static void exit（int status）</td>\n<td>终止当前运行的Java虚拟机，非零表示异常终止</td>\n</tr>\n<tr>\n<td><strong>public static long currentTimeMillis()</strong></td>\n<td><strong>返回当前时间（以毫秒为单位）</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"Object-类的概述：\"><a href=\"#Object-类的概述：\" class=\"headerlink\" title=\"Object 类的概述：\"></a><strong>Object 类的概述：</strong></h2><p>Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public String toString()</td>\n<td>返回对象的字符串表示形式。建议所有子类重写该方法，自动生成</td>\n</tr>\n<tr>\n<td>public boolean equals(Object obj)</td>\n<td>比较对象是否相等。默认比较地址，重写可以比较内容，自动生成</td>\n</tr>\n</tbody></table>\n<h2 id=\"Arrays类概述：\"><a href=\"#Arrays类概述：\" class=\"headerlink\" title=\"Arrays类概述：\"></a><strong>Arrays类概述：</strong></h2><p>Arrays类包含用于操作数组的各种方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>public static String toString(int[] a)</strong></td>\n<td>返回指定数组的内容的字符串表示形式</td>\n</tr>\n<tr>\n<td><strong>public static void sort(int[] a)</strong></td>\n<td>按照数字顺序排列指定的数组</td>\n</tr>\n</tbody></table>\n<p><strong>基本类型包装类概述：</strong>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据 </p>\n<p>常用的操作之一：用于基本数据类型与字符串之间的转换。</p>\n<table>\n<thead>\n<tr>\n<th>基本数据类型</th>\n<th>包装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n</tbody></table>\n<p><strong>自动装箱和拆箱</strong></p>\n<p>装箱：把基本数据类型转换为对应的包装类类型 </p>\n<p>拆箱：把包装类类型转换为对应的基本数据类型</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 自动装箱</span>\ni <span class=\"token operator\">+=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// i = i + 200;  i + 200 自动拆箱；i = i + 200; 是自动装箱</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>注意</strong>：在使用包装类类型的时候，如果做操作，最好先判断是否为 null          </p>\n<p>我们推荐的是，只要是对象，在使用前就必须进行不为 null 的判断</p>\n<h2 id=\"日期类（Date）\"><a href=\"#日期类（Date）\" class=\"headerlink\" title=\"日期类（Date）\"></a>日期类（Date）</h2><p>Date 代表了一个特定的时间，精确到毫秒</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public Date()</td>\n<td>分配一个Date对象，并初始化，以便它代表它被分配到时间，精确到毫秒</td>\n</tr>\n<tr>\n<td>public Date(long date)</td>\n<td>分配一个Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>\n</tr>\n<tr>\n<td><strong>public long getTime()</strong></td>\n<td>获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</td>\n</tr>\n<tr>\n<td><strong>public void setTime(long time)</strong></td>\n<td>设置时间，给的是毫秒值</td>\n</tr>\n</tbody></table>\n<h3 id=\"SimpleDateFormat-类概述（具体类，用于以区域设置敏感的方式格式化和解析日期）\"><a href=\"#SimpleDateFormat-类概述（具体类，用于以区域设置敏感的方式格式化和解析日期）\" class=\"headerlink\" title=\"SimpleDateFormat 类概述（具体类，用于以区域设置敏感的方式格式化和解析日期）\"></a>SimpleDateFormat 类概述（具体类，用于以区域设置敏感的方式格式化和解析日期）</h3><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public SimpleDateFormat()</td>\n<td>构造一个SimpleDateFormat，使用默认模式和日期格式</td>\n</tr>\n<tr>\n<td>public SimpleDateFormat(String pattern)</td>\n<td>构造一个SimpleDateFormat使用给定的模式和默认的日期格式</td>\n</tr>\n</tbody></table>\n<h3 id=\"Calendar类概述（Calendar-为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法）\"><a href=\"#Calendar类概述（Calendar-为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法）\" class=\"headerlink\" title=\"Calendar类概述（Calendar 为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法）\"></a>Calendar类概述（Calendar 为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法）</h3><p>Calendar 提供了一个类方法 getInstance 用于获取 Calendar 对象，其日历字段已使用当前日期和时间初始化：Calendar rightNow = Calendar.getInstance();</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public int get(int field)</td>\n<td>返回给定日历字段的值</td>\n</tr>\n<tr>\n<td>public abstract void add(int field, int amount)</td>\n<td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td>\n</tr>\n<tr>\n<td>public final void set(int year,int month,int date)</td>\n<td>设置当前日历的年月日</td>\n</tr>\n</tbody></table>\n<h1 id=\"异常Throwable\"><a href=\"#异常Throwable\" class=\"headerlink\" title=\"异常Throwable\"></a>异常Throwable</h1><p>异常体系：Throwable–&gt;Error &amp; Exception–&gt;RuntimeException&amp;非RuntimeException</p>\n<p>Error：严重问题，不需要处理 </p>\n<p>Exception：称为异常类，它表示程序本身可以处理的问题 </p>\n<p>RuntimeException：在编译期是不检查的，出现问题后，需要我们回来修改代码  </p>\n<p>非 RuntimeException：编译期就必须处理的，否则程序不能通过编译，就更不能正常运行了</p>\n<p><strong>如果程序出现问题，我们没有做任何异常处理，最终jvm会把异常的名称，异常原因及出现位置信息输出在控制台，然后程序停止执行</strong></p>\n<p>抛出异常两种方案：try…catch…  &amp;  throws 异常类名；</p>\n<p>Thtowable的成员方法</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public String getMessage()</td>\n<td>返回此 throwable 的详细消息字符串</td>\n</tr>\n<tr>\n<td>public String toString()</td>\n<td>返回此可抛出的简短描述</td>\n</tr>\n<tr>\n<td>public void printStackTrace()</td>\n<td>把异常的错误信息输出在控制台</td>\n</tr>\n</tbody></table>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">当Java内置的异常都不能明确的说明异常情况的时候，需要创建自己的异常\n需要注意的是，唯一有用的就是类型名这个信息，所以我们不需要在异常类的设计上花费太多精力\n一个类要想成为异常类的一员，要么继承Exception，要么继承RuntimeException\n通常情况下，会直接继承自Exception类，给出无参和带参构造方法即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 异常类名 <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//无参构造</span>\n\t<span class=\"token comment\">//带参构造</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//demo</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScoreException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ScoreException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ScoreException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t     <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"throws-和-throw-的区别\"><a href=\"#throws-和-throw-的区别\" class=\"headerlink\" title=\"throws 和 throw 的区别\"></a>throws 和 throw 的区别</h2><p>throws </p>\n<ul>\n<li><p>用在方法声明后面，跟的是异常类名 </p>\n</li>\n<li><p>表示抛出异常，由该方法的调用者来处理 </p>\n</li>\n<li><p>表示出现异常的一种可能性，并不一定会发生这些异常</p>\n</li>\n</ul>\n<p>throw </p>\n<ul>\n<li><p>用在方法体内，跟的是异常对象名 </p>\n</li>\n<li><p>表示抛出异常，由方法体内的语句处理 </p>\n</li>\n<li><p>执行 throw 一定抛出了某种异常</p>\n</li>\n</ul>\n<h1 id=\"IO流处理\"><a href=\"#IO流处理\" class=\"headerlink\" title=\"IO流处理\"></a>IO流处理</h1><h2 id=\"File类（用于操作文件和目录）\"><a href=\"#File类（用于操作文件和目录）\" class=\"headerlink\" title=\"File类（用于操作文件和目录）\"></a>File类（用于操作文件和目录）</h2><p>File：它说文件和目录路径名的抽象表示</p>\n<ul>\n<li><p>文件和目录说可以通过file封装成对象的</p>\n</li>\n<li><p>对于file而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。 </p>\n</li>\n<li><p>将来是通过具体的操作把这个路径的内容转换成具体存在</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>File(String pathname)</td>\n<td>通过将给定的路径名字符串转换成抽象路径名来创建新的File实例</td>\n</tr>\n<tr>\n<td>File(String parent, String child)</td>\n<td>从父路径名字符串和子路径名字符串创建新的 File实例</td>\n</tr>\n<tr>\n<td>File(File parent, String child)</td>\n<td>从父抽象路径名和子路径名字符串创建新的 File实例</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"File类增删功能\"><a href=\"#File类增删功能\" class=\"headerlink\" title=\"File类增删功能\"></a>File类增删功能</h2><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean createNewFile()</td>\n<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td>\n</tr>\n<tr>\n<td>public boolean mkdir()</td>\n<td>创建由此抽象路径名命名的目录</td>\n</tr>\n<tr>\n<td>public boolean mkdirs()</td>\n<td>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean delete()</td>\n<td>删除由此抽象路径名表示的文件或目录</td>\n</tr>\n</tbody></table>\n<p><strong>绝对路径和相对路径的区别</strong></p>\n<p>​    l绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E:\\itcast\\java.txt</p>\n<p>​    l相对路径：必须使用取自其他路径名的信息进行解释。例如：myFile\\java.txt</p>\n<p><strong>删除目录时的注意事项：</strong></p>\n<p>​    l如果一个目录中有内容(目录，文件)，不能直接删除。应该先删除目录中的内容，最后才能删除目录</p>\n<h2 id=\"File类判断和获取功能\"><a href=\"#File类判断和获取功能\" class=\"headerlink\" title=\"File类判断和获取功能\"></a>File类判断和获取功能</h2><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public boolean isDirectory()</td>\n<td>测试此抽象路径名表示的File是否为目录</td>\n</tr>\n<tr>\n<td>public boolean isFile()</td>\n<td>测试此抽象路径名表示的File是否为文件</td>\n</tr>\n<tr>\n<td>public boolean exists()</td>\n<td>测试此抽象路径名表示的File是否存在</td>\n</tr>\n<tr>\n<td>public String getAbsolutePath()</td>\n<td>返回此抽象路径名的绝对路径名字符串</td>\n</tr>\n<tr>\n<td>public String getPath()</td>\n<td>将此抽象路径名转换为路径名字符串</td>\n</tr>\n<tr>\n<td>public String getName()</td>\n<td>返回由此抽象路径名表示的文件或目录的名称</td>\n</tr>\n<tr>\n<td>public String[] list()</td>\n<td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td>\n</tr>\n<tr>\n<td>public File[] listFiles()</td>\n<td>返回此抽象路径名表示的目录中的文件和目录的File对象数组</td>\n</tr>\n</tbody></table>\n<h1 id=\"字节流和字符流（操作文件传输）\"><a href=\"#字节流和字符流（操作文件传输）\" class=\"headerlink\" title=\"字节流和字符流（操作文件传输）\"></a>字节流和字符流（操作文件传输）</h1><p>IO流概述：</p>\n<ul>\n<li><p>IO：输入/输出(Input/Output)</p>\n</li>\n<li><p>流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</p>\n</li>\n<li><p>IO流就是用来处理设备间数据传输问题的</p>\n<p>​    常见的应用：文件复制；文件上传；文件下载</p>\n</li>\n<li><p>IO流分类：</p>\n<ul>\n<li><p>按照数据的流向</p>\n<ul>\n<li><p>输入流：读数据</p>\n<p>输出流：写数据</p>\n</li>\n</ul>\n</li>\n<li><p>按照数据类型来分</p>\n<ul>\n<li><p>字节流</p>\n<p> 字节输入流；字节输出流</p>\n<p>字符流</p>\n<p> 字符输入流；字符输出流</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>一般来说，我们说IO流的分类是按照<strong>数据类型</strong>来分的</p>\n</li>\n<li><p>如果数据通过Window自带的记事本软件打开，我们还可以<strong>读懂里面的内容</strong>，就使用<strong>字符流</strong>，</p>\n<p>否则使用字节流。<strong>如果你不知道该使用哪种类型的流，就使用字节流</strong></p>\n</li>\n</ul>\n<h1 id=\"内存划分（伊甸园区，旧生代区，永久区）\"><a href=\"#内存划分（伊甸园区，旧生代区，永久区）\" class=\"headerlink\" title=\"内存划分（伊甸园区，旧生代区，永久区）\"></a>内存划分（伊甸园区，旧生代区，永久区）</h1><p>内存的优良划分是系统优化很关键的一环，主要考察内存优化和GC机制</p>\n<p>Runtime类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryT</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Runtime</span> run<span class=\"token operator\">=</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//取得Runtime对象</span>\n<span class=\"token comment\">//        Runtime rund = new Runtime();//这个不行，因为Runtime类采用单例设计模式 它的构造方法Runtime()是私有的；</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内存1\"</span><span class=\"token operator\">+</span>run<span class=\"token punctuation\">.</span><span class=\"token function\">maxMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内存3\"</span><span class=\"token operator\">+</span>run<span class=\"token punctuation\">.</span><span class=\"token function\">totalMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//返回值都为long类型 就是一子节 1byte；</span>\n      \n     \t  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"内存2\"</span><span class=\"token operator\">+</span>run<span class=\"token punctuation\">.</span><span class=\"token function\">freeMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>伊甸园区：新生的对象都存在这里，但不是所有对象都永久存在，伴随着内存的不足会进行gc处理空出空间给新生的对象；</p>\n<p>旧生代区：长期使用的对象存在这里，当伊甸园区进行了gc处理仍然空间不足时，该区进行gc处理；</p>\n<p>永久区：永不清理的内存空间；</p>\n<p>调整内存大小：xms-初始内存大小  默认为物理内存1/64但小于1g；</p>\n<p>​                           xmx-最大内存大小 默认为物理内存的1/4但小于1g ；</p>\n<p>​                           xmn-伊甸园区堆内存大小； 因为默认值实在太小了，我们实际服务器基本就16g以上，所以需要手动调整优化性能；</p>\n<h1 id=\"加载器\"><a href=\"#加载器\" class=\"headerlink\" title=\"加载器\"></a>加载器</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> dmp<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoaderT</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">class</span> demo<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> cls <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//AppClassLoade sun.misc.Launcher$AppClassLoader@18b4aac2</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ExtClassLoade</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//三层加载器</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类加载器可自定义，Java中采用双亲加载方式，加载系统类时调用另一套加载器。</p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","feature":null,"text":"标准类制作 成员变量 ​ 使用private修饰 构造方法 提供一个无参构造方法 提供一个带多个参数的构造方法 成员方法 提供每一个成员变量对应的setXxx( )/getXxx( ) 提供一个显示对象信息的show（） 创建对象并对其成员变量赋值的两种方式t 无参构造方法创建对...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86%E7%B1%BB%E5%88%B6%E4%BD%9C\"><span class=\"toc-text\">标准类制作</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9B%86%E5%90%88\"><span class=\"toc-text\">集合</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ArrayList\"><span class=\"toc-text\">ArrayList</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E7%8A%B6%E6%80%81%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">修饰符(权限修饰符&#x2F;状态修饰符)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81%EF%BC%88%E5%90%8C%E4%B8%80%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9C%A8%E4%B8%8D%E5%90%8C%E6%97%B6%E5%88%BB%E8%A1%A8%E7%8E%B0%E5%87%BA%E6%9D%A5%E7%9A%84%E4%B8%8D%E5%90%8C%E5%BD%A2%E6%80%81%EF%BC%89\"><span class=\"toc-text\">多态（同一对象，在不同时刻表现出来的不同形态）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">抽象类和接口</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BD%A2%E5%8F%82%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">形参和返回值注意事项</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Some-question%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%88%E5%B0%B1%E6%98%AF%E5%9C%A8%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E7%B1%BB%E3%80%82%EF%BC%89\"><span class=\"toc-text\">Some question内部类（就是在一个类中定义一个类。）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8API-Math-System-Object-Arrays-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%8C%85%E8%A3%85%E7%B1%BB-%E6%97%A5%E6%9C%9F%E7%B1%BB-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%EF%BC%9A%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E7%A7%81%E6%9C%89%E3%80%82%E6%88%90%E5%91%98%E9%83%BD%E7%94%A8static%E4%BF%AE%E9%A5%B0%E3%80%82\"><span class=\"toc-text\">常用API (Math System Object Arrays 基本类型包装类 日期类)常用的工具类的设计思想：构造方法私有。成员都用static修饰。</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Math-%E7%B1%BB%E6%A6%82%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">Math 类概述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#System%E7%B1%BB%E6%A6%82%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">System类概述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Object-%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">Object 类的概述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Arrays%E7%B1%BB%E6%A6%82%E8%BF%B0%EF%BC%9A\"><span class=\"toc-text\">Arrays类概述：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E7%B1%BB%EF%BC%88Date%EF%BC%89\"><span class=\"toc-text\">日期类（Date）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SimpleDateFormat-%E7%B1%BB%E6%A6%82%E8%BF%B0%EF%BC%88%E5%85%B7%E4%BD%93%E7%B1%BB%EF%BC%8C%E7%94%A8%E4%BA%8E%E4%BB%A5%E5%8C%BA%E5%9F%9F%E8%AE%BE%E7%BD%AE%E6%95%8F%E6%84%9F%E7%9A%84%E6%96%B9%E5%BC%8F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%92%8C%E8%A7%A3%E6%9E%90%E6%97%A5%E6%9C%9F%EF%BC%89\"><span class=\"toc-text\">SimpleDateFormat 类概述（具体类，用于以区域设置敏感的方式格式化和解析日期）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Calendar%E7%B1%BB%E6%A6%82%E8%BF%B0%EF%BC%88Calendar-%E4%B8%BA%E6%9F%90%E4%B8%80%E6%97%B6%E5%88%BB%E5%92%8C%E4%B8%80%E7%BB%84%E6%97%A5%E5%8E%86%E5%AD%97%E6%AE%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%EF%BC%8C%E5%B9%B6%E4%B8%BA%E6%93%8D%E4%BD%9C%E6%97%A5%E5%8E%86%E5%AD%97%E6%AE%B5%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">Calendar类概述（Calendar 为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8Throwable\"><span class=\"toc-text\">异常Throwable</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">自定义异常</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#throws-%E5%92%8C-throw-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">throws 和 throw 的区别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IO%E6%B5%81%E5%A4%84%E7%90%86\"><span class=\"toc-text\">IO流处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#File%E7%B1%BB%EF%BC%88%E7%94%A8%E4%BA%8E%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%89\"><span class=\"toc-text\">File类（用于操作文件和目录）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#File%E7%B1%BB%E5%A2%9E%E5%88%A0%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">File类增删功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#File%E7%B1%BB%E5%88%A4%E6%96%AD%E5%92%8C%E8%8E%B7%E5%8F%96%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">File类判断和获取功能</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E8%8A%82%E6%B5%81%E5%92%8C%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%88%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%EF%BC%89\"><span class=\"toc-text\">字节流和字符流（操作文件传输）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E5%88%92%E5%88%86%EF%BC%88%E4%BC%8A%E7%94%B8%E5%9B%AD%E5%8C%BA%EF%BC%8C%E6%97%A7%E7%94%9F%E4%BB%A3%E5%8C%BA%EF%BC%8C%E6%B0%B8%E4%B9%85%E5%8C%BA%EF%BC%89\"><span class=\"toc-text\">内存划分（伊甸园区，旧生代区，永久区）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E5%99%A8\"><span class=\"toc-text\">加载器</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"javascript基础","uid":"b9dfd556530770a74514e4f3a5fd8a27","slug":"JavaScript基础笔记","date":"2019-08-26T07:13:43.000Z","updated":"2021-04-07T08:42:39.452Z","comments":true,"path":"api/articles/JavaScript基础笔记.json","keywords":null,"cover":null,"text":"JavaScript：* 概念： 一门客户端脚本语言 * 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎 * 脚本语言：不需要编译，直接就可以被浏览器解析执行了 * 功能： * 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动...","link":"","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"前端","slug":"前端","count":2,"path":"api/tags/前端.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"java基础","uid":"bb75e9d1c3429d83254e84314ef5ffe1","slug":"java基础","date":"2018-09-21T07:10:50.000Z","updated":"2021-04-08T02:04:31.750Z","comments":true,"path":"api/articles/java基础.json","keywords":null,"cover":null,"text":"Java概述Java的跨平台性实现原理：通过jvm（Java virtual machine）作翻译。 jre和jdk： jre是Java的运行环境，包括jvm和运行时所需要的核心类库。如果是运行一个已有Java程序，则只需要安装jre即可。 jdk是Java程序开发工具包，包含...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}