{"title":"函数式编程","uid":"78bf35c97e41da6a2bdad05b63951aa3","slug":"函数式编程","date":"2021-04-19T02:19:13.000Z","updated":"2021-04-19T08:47:25.184Z","comments":true,"path":"api/articles/函数式编程.json","keywords":null,"cover":[],"content":"<h1 id=\"函数式接口概述\"><a href=\"#函数式接口概述\" class=\"headerlink\" title=\"函数式接口概述\"></a>函数式接口概述</h1><p><strong>有且只有一个抽象方法 即无内容方法</strong></p>\n<p>用@Functionallnterface判断是不是函数式接口</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// Java8之前：旧的写法</span>\n<span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"old run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Java8之后：新的写法</span>\n<span class=\"token class-name\">Runnable</span> runnable1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lambda run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/post/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/008eGmZEgy1gpjlspdm1oj30jv04t0t9.jpeg\" alt=\"008eGmZEgy1gpjlspdm1oj30jv04t0t9\"></p>\n<p><strong>lamda可以直接将代码块传递给对象或方法</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Java7新增的语法，try()&#123;&#125;，可自动关闭资源，减少了代码的臃肿</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span> \n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span>  <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\JavaProject\\\\JavaBasicDemo\\\\test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//核心代码行 读取第一行并返回</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//编写函数式接口</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FileReadInterface</span><span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token comment\">// 这里接受一个BufferedReader对象，返回一个String对象</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> reader<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 读取一行</span>\n<span class=\"token class-name\">FileReadInterface</span> fileReadInterface <span class=\"token operator\">=</span> reader <span class=\"token operator\">-></span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 读取两行</span>\n<span class=\"token class-name\">FileReadInterface</span> fileReadInterface2 <span class=\"token operator\">=</span> reader <span class=\"token operator\">-></span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 参数为第二步我们自己手写的函数式接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileReadInterface</span> fileReadInterface<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span>\n                 <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token comment\">// 这里我们不再自己定义行为，而是交给函数式接口的抽象方法来处理，然后通过lambda表达式的传入来实现多个行为</span>\n          <span class=\"token keyword\">return</span> fileReadInterface<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>bufferedReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileReaderDemo</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token comment\">// 第三步： </span>\n      \t<span class=\"token comment\">// lambda表达式1 传给 函数式接口：只读取一行</span>\n      \t<span class=\"token class-name\">FileReadInterface</span> fileReadInterface <span class=\"token operator\">=</span> reader <span class=\"token operator\">-></span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// lambda表达式2 传给 函数式接口：只读取两行</span>\n      \t<span class=\"token class-name\">FileReadInterface</span> fileReadInterface2 <span class=\"token operator\">=</span> reader <span class=\"token operator\">-></span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \t<span class=\"token comment\">// 最后一步： 不同的函数式接口的实现，表现出不同的行为</span>\n        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span>fileReadInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span>fileReadInterface2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  \n  \t<span class=\"token comment\">// 第四步： 读取文件方法，接受函数式接口作为参数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileReadInterface</span> fileReadInterface<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span>\n                 <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t<span class=\"token comment\">// 调用函数式接口中的抽象方法来处理数据\t\t\t\t\t</span>\n          <span class=\"token keyword\">return</span> fileReadInterface<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>bufferedReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token comment\">// 第一步：</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">processFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">BufferedReader</span> bufferedReader <span class=\"token operator\">=</span>\n                 <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> bufferReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 第二步： 我们手写的函数式接口</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FileReadInterface</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> reader<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// 都是接受一个参数，返回另一个参数</span>\n  <span class=\"token class-name\">R</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":null,"text":"函数式接口概述有且只有一个抽象方法 即无内容方法 用@Functionallnterface判断是不是函数式接口 // Java8之前：旧的写法 Runnable runnable = new Runnable() &#123; @Override public void run...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Java8","slug":"Java8","count":1,"path":"api/categories/Java8.json"}],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">函数式接口概述</span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"让vue入个门吧","uid":"b5228ecd688318d2d19c78d7325d6fc2","slug":"让vue入个门吧","date":"2021-04-21T07:15:20.000Z","updated":"2021-04-21T09:15:03.629Z","comments":true,"path":"api/articles/让vue入个门吧.json","keywords":null,"cover":null,"text":"![截屏2021-04-21 下午3.20.19](让vue入个门吧/截屏2021-04-21 下午3.20.19.png) 伟大的DOM🌲","link":"","photos":[],"count_time":{"symbolsCount":71,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"about","uid":"d161500ac7b3c518546366fc4b6ac5c1","slug":"about","date":"2021-04-18T21:05:51.000Z","updated":"2021-04-18T21:05:51.662Z","comments":true,"path":"api/articles/about.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}