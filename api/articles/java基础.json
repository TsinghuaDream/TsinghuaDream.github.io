{"title":"java基础","uid":"bb75e9d1c3429d83254e84314ef5ffe1","slug":"java基础","date":"2018-09-21T07:10:50.000Z","updated":"2021-04-08T02:04:31.750Z","comments":true,"path":"api/articles/java基础.json","keywords":null,"cover":null,"content":"<h1 id=\"Java概述\"><a href=\"#Java概述\" class=\"headerlink\" title=\"Java概述\"></a>Java概述</h1><p><strong>Java的跨平台性实现原理</strong>：通过jvm（Java virtual machine）作翻译。</p>\n<p><strong>jre和jdk：</strong></p>\n<p>jre是Java的运行环境，包括jvm和运行时所需要的核心类库。如果是运行一个已有Java程序，则只需要安装jre即可。</p>\n<p>jdk是Java程序开发工具包，<strong>包含jre和开发人员使用的工具</strong>。其中的开发工具包含编译工具（Javac.exe）和运行工具（Java.exe)。我们需要开发一个全新的Java程序，那么必须安装jdk。</p>\n<h1 id=\"Java的hello-world\"><a href=\"#Java的hello-world\" class=\"headerlink\" title=\"Java的hello world\"></a>Java的hello world</h1><p>开发Java程序，需要三个步骤：编写程序-编译程序-运行程序</p>\n<p>​                                  文件变化：Java源程序-通过编译器Javac.exe- Java字节码文件- 运行程序Java.exe</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p><strong>注释：</strong>不谈</p>\n<p><strong>关键字：</strong>被java语言赋予特定含义的单词，也是命名时需要规避的单词，关键字的字母全部为小写。</p>\n<p><strong>常量：</strong>在程序运行过程中，其值不可发生改变的量。</p>\n<p><strong>基本数据类型：</strong>整数；浮点型；字符；布尔；</p>\n<p><strong>变量：</strong>在程序运行过程中，其值可发生变化的量<strong>从本质上讲，变量是内存中一小块区域</strong>。</p>\n<p><strong>标识符：</strong>就是给类，方法，变量等起名字的符号。<strong>命名规范：小驼峰：firstName（方法、变量）大驼峰：firstName（类）</strong></p>\n<p><strong>类型转换：</strong></p>\n<p>自动类型转换：把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量 double a = 10;</p>\n<p>强制类型转换：把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量 int k = (int)88.88;</p>\n<h1 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h1><h2 id=\"算术运算符：-（加减乘除余）\"><a href=\"#算术运算符：-（加减乘除余）\" class=\"headerlink\" title=\"算术运算符：+ - * / %（加减乘除余）\"></a><strong>算术运算符：</strong>+ - * / %（加减乘除余）</h2><p>字符的“+”操作：拿字符在计算机底层对应的数值来进行计算 A+a=162;</p>\n<p>算术表达式中<strong>包含多个基本数据类型的值</strong>的时候，<strong>整个算术表达式的类型会自动进行提升</strong>。<strong>提升到表达式中最高等级操作数相同的类型</strong></p>\n<p>提升等级顺序：byte,short,char –&gt; int –&gt;long –&gt; float –&gt; double</p>\n<p>当“+”操作中出现字符串，“+”被判定为字符串连接符，而不是算术运算，<strong>而当多个数字和字符串同时出现，则从左到右依次判定。</strong>1+99+“hello”+28+22+“world”=“200hello2822world”</p>\n<h2 id=\"赋值运算符：-，-，-，-，-，-（赋值，加后赋值，减后赋值，乘后赋值，除后赋值，取余后赋值）\"><a href=\"#赋值运算符：-，-，-，-，-，-（赋值，加后赋值，减后赋值，乘后赋值，除后赋值，取余后赋值）\" class=\"headerlink\" title=\"赋值运算符：=，+=，-=，*=，/=，%=（赋值，加后赋值，减后赋值，乘后赋值，除后赋值，取余后赋值）\"></a>赋值运算符：=，+=，-=，*=，/=，%=（赋值，加后赋值，减后赋值，乘后赋值，除后赋值，取余后赋值）</h2><p><strong>拓展的赋值运算符隐含了强制类型转换</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\na<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a=2</span>\na<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a=4</span>\na<span class=\"token operator\">-=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a=2</span>\na<span class=\"token operator\">*=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a=4</span>\na<span class=\"token operator\">/=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a=2</span>\na<span class=\"token operator\">%=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//a=0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"自增自减运算符：-，–（自增，自减）\"><a href=\"#自增自减运算符：-，–（自增，自减）\" class=\"headerlink\" title=\"自增自减运算符：++，–（自增，自减）\"></a>自增自减运算符：++，–（自增，自减）</h2><p>注意事项：</p>\n<ul>\n<li>++和– 既可以放在变量的后边，也可以放在变量的前边。</li>\n<li>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。</li>\n<li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。       参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。</li>\n</ul>\n<h1 id=\"关系运算符：-，！-，-gt-，-gt-，-lt-，-lt\"><a href=\"#关系运算符：-，！-，-gt-，-gt-，-lt-，-lt\" class=\"headerlink\" title=\"关系运算符：==，！=，&gt;，&gt;=，&lt;，&lt;=\"></a>关系运算符：==，！=，&gt;，&gt;=，&lt;，&lt;=</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2l</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=false</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">!=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=false</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">>=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=false</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"逻辑运算符-amp-，-，-，！，-amp-amp-，｜｜（与，或，异或，非，短路与，短路或）\"><a href=\"#逻辑运算符-amp-，-，-，！，-amp-amp-，｜｜（与，或，异或，非，短路与，短路或）\" class=\"headerlink\" title=\"逻辑运算符 &amp;，|，^，！，&amp;&amp;，｜｜（与，或，异或，非，短路与，短路或）\"></a>逻辑运算符 &amp;，|，^，！，&amp;&amp;，｜｜（与，或，异或，非，短路与，短路或）</h2><p>3&lt;x&lt;6</p>\n<p>x&gt;3和x&lt;6</p>\n<p>x&gt;3&amp;&amp;x&lt;6</p>\n<p><strong>逻辑运算符，是用来连接关系表达式的运算符。 当然，逻辑运算符也可以直接连接布尔类型的常量或者变量。</strong></p>\n<p>\u0003</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> c<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true a&amp;b，a和b都是true，结果为true，否则为false</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">|</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true a|b，a和b都是false，结果为false，否则为true</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">^</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true a^b，a和b结果不同为true，相同为false</span>\nc<span class=\"token operator\">=</span><span class=\"token operator\">!</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true !a，结果和a的结果正好相反</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true 作用和&amp;相同，但是有短路效果</span>\nc<span class=\"token operator\">=</span>a<span class=\"token operator\">||</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//c=true 作用和|相同，但是有短路效果</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a><strong>注意事项：</strong></h3><ul>\n<li>逻辑与&amp;，无论左边真假，右边都要执行。       短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</li>\n<li>逻辑或|，无论左边真假，右边都要执行。       短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</li>\n<li>最常用的逻辑运算符：&amp;&amp;，||，!</li>\n</ul>\n<h2 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h2><p>格式：关系表达式？表达式1:表达式2；</p>\n<p>范式：a&gt;b?a:b;</p>\n<p>计算规则：</p>\n<p>​            首先计算关系表达式的值</p>\n<p>​            如果值为true，表达式1的值就是运算结果</p>\n<p>​            如果值为false，表达式2的值就是运算结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nc <span class=\"token operator\">=</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">// c = b;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>三元案例：动物园有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断力两只老虎的体重是否相同。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> weight1 <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> weight2 <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>weight1 <span class=\"token operator\">==</span> weight2<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"数据输入（Scanner）\"><a href=\"#数据输入（Scanner）\" class=\"headerlink\" title=\"数据输入（Scanner）\"></a>数据输入（Scanner）</h1><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//导包的动作必须出现在类定义的上边</span>\n\n<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变。</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//上面这个格式里面，只有i是变量名，可以变，其他的都不允许变。</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"流程控制（循环-for-while-do…while-，顺序，分支（if-switch））\"><a href=\"#流程控制（循环-for-while-do…while-，顺序，分支（if-switch））\" class=\"headerlink\" title=\"流程控制（循环(for, while,do…while)，顺序，分支（if,switch））\"></a>流程控制（循环(for, while,do…while)，顺序，分支（if,switch））</h1><p>需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季节，并输出。</p>\n<p>分析：</p>\n<ol>\n<li><p>键盘录入月份数据，使用变量接收</p>\n<p>import java.util.Scanner;\u000b</p>\n<p>Scanner sc = new Scanner(System.in);\u000b</p>\n<p>int month = sc.nextInt();</p>\n</li>\n<li><p>多情况判断，采用switch语句实现</p>\n<p>switch (month) {\u000b    </p>\n<p>case X:\u000b    </p>\n<p>case X:\u000b    </p>\n<p>case X:\u000b    </p>\n<p>default:\u000b}</p>\n</li>\n<li><p>在每种情况中，完成输出对应的季节（选择了几个）</p>\n<p>case 3:\u000b    </p>\n<p>​    System.out.println(“春季”);\u000b    </p>\n<p>​    break; </p>\n<p>case 6:\u000b    </p>\n<p>​    System.out.println(“夏季”);</p>\n<p>\u000b    break; </p>\n<p>case 9:\u000b </p>\n<p>   System.out.println(“秋季”);\u000b</p>\n<p>​    break;</p>\n<p>case 12:\u000b</p>\n<p>​    System.out.println(“冬季”);\u000b</p>\n<p>​    break;</p>\n</li>\n</ol>\n<p><strong>注意事项</strong>：在switch语句中，如果case控制的语句体后面不写break，将出现穿透现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束</p>\n<h1 id=\"数组（array）\"><a href=\"#数组（array）\" class=\"headerlink\" title=\"数组（array）\"></a>数组（array）</h1><p>数组(array)是一种用于存储多个相同类型数据的存储模型</p>\n<p><strong>数组的定义格式：</strong></p>\n<ul>\n<li>格式一：数据类型[ ] 变量名</li>\n<li>范式： int [ ] arr;</li>\n<li>定义了一个int类型的变量，变量名上arr数组</li>\n</ul>\n<ul>\n<li>格式二：数据类型 变量名[ ]</li>\n<li>范式：int arr[ ]</li>\n<li>定义了一个int类型的变量，变量名是arr数组</li>\n</ul>\n<p><strong>数组初始化方式：</strong></p>\n<p><strong>数组动态初始化</strong>：初始化时只指定数组长度，由系统为数组分配初始值</p>\n<ul>\n<li>格式：数据类型 [ ] 变量名 = new 数据类型 [ ];</li>\n<li>范式：int [ ] arr = new int[3]; </li>\n</ul>\n<p><strong>数组元素访问：</strong>数组名[索引]</p>\n<p><strong>内存分配：</strong>Java程序在运行时，需要在内存中分配空间。为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p>\n<p>栈内存：存储局部变量 定义在方法中的变量，例如：arr 使用完毕，立即消失 </p>\n<p><strong>堆内存</strong>：存储new出来的内容(实体，对象) 数组在初始化时，会为存储空间添加默认值 整数：0 浮点数：0.0 布尔：false 字符：空字符 引用数据类型：null 每一个new出来的东西都有一个地址值 使用完毕，会在垃圾回收器空闲时被回收</p>\n<p><strong>数组静态初始化：</strong>初始化时指定每个数组元素的初始值，由系统决定数组长度</p>\n<ul>\n<li>格式： 数据类型 [] 变量名 = new 数据类型[ ]{数据1，数据2，数据3，……};</li>\n<li>范例：int [ ] arr = new int [ ]{1,2,3};</li>\n<li>简化格式：数据类型 [ ] 变量名 = {数据1，数据2，数据3，……};</li>\n<li>范例：int [ ] arr = {1,2,3};</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*例子 获取最大值 152 150 163 171 128 130 81 168*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">152</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">163</span><span class=\"token punctuation\">,</span><span class=\"token number\">171</span><span class=\"token punctuation\">,</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span><span class=\"token number\">130</span><span class=\"token punctuation\">,</span><span class=\"token number\">81</span><span class=\"token punctuation\">,</span><span class=\"token number\">168</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    max<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\nsout arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><p><strong>方法重载：</strong>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p>\n<ul>\n<li>多个方法在同一个类中</li>\n<li>多个方法具有相同的方法名</li>\n<li>多个方法的参数不相同，类型不同或者数量不同</li>\n</ul>\n<h1 id=\"Debug（调试）\"><a href=\"#Debug（调试）\" class=\"headerlink\" title=\"Debug（调试）\"></a>Debug（调试）</h1>","feature":null,"text":"Java概述Java的跨平台性实现原理：通过jvm（Java virtual machine）作翻译。 jre和jdk： jre是Java的运行环境，包括jvm和运行时所需要的核心类库。如果是运行一个已有Java程序，则只需要安装jre即可。 jdk是Java程序开发工具包，包含...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"java","slug":"java","count":3,"path":"api/tags/java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">Java概述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E7%9A%84hello-world\"><span class=\"toc-text\">Java的hello world</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A-%EF%BC%88%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E4%BD%99%EF%BC%89\"><span class=\"toc-text\">算术运算符：+ - * &#x2F; %（加减乘除余）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A-%EF%BC%8C-%EF%BC%8C-%EF%BC%8C-%EF%BC%8C-%EF%BC%8C-%EF%BC%88%E8%B5%8B%E5%80%BC%EF%BC%8C%E5%8A%A0%E5%90%8E%E8%B5%8B%E5%80%BC%EF%BC%8C%E5%87%8F%E5%90%8E%E8%B5%8B%E5%80%BC%EF%BC%8C%E4%B9%98%E5%90%8E%E8%B5%8B%E5%80%BC%EF%BC%8C%E9%99%A4%E5%90%8E%E8%B5%8B%E5%80%BC%EF%BC%8C%E5%8F%96%E4%BD%99%E5%90%8E%E8%B5%8B%E5%80%BC%EF%BC%89\"><span class=\"toc-text\">赋值运算符：&#x3D;，+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;，%&#x3D;（赋值，加后赋值，减后赋值，乘后赋值，除后赋值，取余后赋值）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A-%EF%BC%8C%E2%80%93%EF%BC%88%E8%87%AA%E5%A2%9E%EF%BC%8C%E8%87%AA%E5%87%8F%EF%BC%89\"><span class=\"toc-text\">自增自减运算符：++，–（自增，自减）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%9A-%EF%BC%8C%EF%BC%81-%EF%BC%8C-gt-%EF%BC%8C-gt-%EF%BC%8C-lt-%EF%BC%8C-lt\"><span class=\"toc-text\">关系运算符：&#x3D;&#x3D;，！&#x3D;，&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6-amp-%EF%BC%8C-%EF%BC%8C-%EF%BC%8C%EF%BC%81%EF%BC%8C-amp-amp-%EF%BC%8C%EF%BD%9C%EF%BD%9C%EF%BC%88%E4%B8%8E%EF%BC%8C%E6%88%96%EF%BC%8C%E5%BC%82%E6%88%96%EF%BC%8C%E9%9D%9E%EF%BC%8C%E7%9F%AD%E8%B7%AF%E4%B8%8E%EF%BC%8C%E7%9F%AD%E8%B7%AF%E6%88%96%EF%BC%89\"><span class=\"toc-text\">逻辑运算符 &amp;，|，^，！，&amp;&amp;，｜｜（与，或，异或，非，短路与，短路或）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A\"><span class=\"toc-text\">注意事项：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">三元运算符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%EF%BC%88Scanner%EF%BC%89\"><span class=\"toc-text\">数据输入（Scanner）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%88%E5%BE%AA%E7%8E%AF-for-while-do%E2%80%A6while-%EF%BC%8C%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%88%86%E6%94%AF%EF%BC%88if-switch%EF%BC%89%EF%BC%89\"><span class=\"toc-text\">流程控制（循环(for, while,do…while)，顺序，分支（if,switch））</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%EF%BC%88array%EF%BC%89\"><span class=\"toc-text\">数组（array）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Debug%EF%BC%88%E8%B0%83%E8%AF%95%EF%BC%89\"><span class=\"toc-text\">Debug（调试）</span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java高级","uid":"b60ec295ef5609360b5e4f746898908f","slug":"Java高级","date":"2018-12-03T02:03:26.000Z","updated":"2021-04-26T02:25:08.190Z","comments":true,"path":"api/articles/Java高级.json","keywords":null,"cover":null,"text":"标准类制作 成员变量 ​ 使用private修饰 构造方法 提供一个无参构造方法 提供一个带多个参数的构造方法 成员方法 提供每一个成员变量对应的setXxx( )/getXxx( ) 提供一个显示对象信息的show（） 创建对象并对其成员变量赋值的两种方式t 无参构造方法创建对...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":1,"path":"api/tags/Java.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"day08_html&css/11_案例-注册页面(css)","date":"2018-05-15T09:32:25.205Z","updated":"2018-05-15T09:32:25.205Z","comments":true,"path":"api/articles/day08_html&css/11_案例-注册页面(css).json","keywords":null,"cover":[],"text":" 注册页面 *{ margin: 0px; padding: 0px; box-sizing: border-box; } body{ background: url(\"img/register_bg.png\") no-repeat center; padding-top: 25...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}