{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"tomcat调优","date":"2021-04-02T08:46:34.916Z","updated":"2021-04-02T08:48:38.283Z","comments":true,"path":"api/articles/tomcat调优.json","keywords":null,"cover":[],"content":"<h2 id=\"title-tomcat调优\"><a href=\"#title-tomcat调优\" class=\"headerlink\" title=\"title: tomcat调优\"></a>title: tomcat调优</h2><p>date: 2021-04-02 16:46:34<br>tags: tomcat调优</p>\n<h1 id=\"一、描述\"><a href=\"#一、描述\" class=\"headerlink\" title=\"一、描述\"></a><strong>一、描述</strong></h1><p>最近，在补充自己的短板，刚好整理到<a href=\"http://mp.weixin.qq.com/s?__biz=MzU5NTAzNjM0Mw==&mid=2247485487&idx=2&sn=614b2cbce66acfd2361c7024f521cf35&chksm=fe7959f7c90ed0e14f8037f3ff3f132aa4c9097d5656f9ae9a8cacefae2d8b09d16d90820482&scene=21#wechat_redirect\"> Tomcat 调优</a>这块，基本上面试必问，于是就花了点时间去搜集一下 Tomcat 调优都调了些什么，先记录一下调优手段，更多详细的原理和实现以后用到时候再来补充记录，下面就来介绍一下，Tomcat 调优大致分为两大类。</p>\n<h2 id=\"1、Tomcat的自身调优\"><a href=\"#1、Tomcat的自身调优\" class=\"headerlink\" title=\"1、Tomcat的自身调优\"></a><strong>1、Tomcat的自身调优</strong></h2><p>采用动静分离节约 Tomcat 的性能</p>\n<p>调整 Tomcat 的线程池</p>\n<p>调整 Tomcat 的连接器</p>\n<p>修改 Tomcat 的运行模式</p>\n<p>禁用 AJP 连接器</p>\n<h2 id=\"2、JVM的调优\"><a href=\"#2、JVM的调优\" class=\"headerlink\" title=\"2、JVM的调优\"></a><strong>2、JVM的调优</strong></h2><p>调优jvm内存</p>\n<h1 id=\"二、Tomcat-自身调优\"><a href=\"#二、Tomcat-自身调优\" class=\"headerlink\" title=\"二、Tomcat 自身调优\"></a><strong>二、Tomcat 自身调优</strong></h1><h2 id=\"1、采用动静分离\"><a href=\"#1、采用动静分离\" class=\"headerlink\" title=\"1、采用动静分离\"></a><strong>1、采用动静分离</strong></h2><p>静态资源如果让<a href=\"http://mp.weixin.qq.com/s?__biz=MzU5NTAzNjM0Mw==&mid=2247485556&idx=3&sn=4d4b240eefa802b398f2e6b47a6957ca&chksm=fe7959acc90ed0ba4aed31874fe0dbde62e1af19670ea349d68dba804b14d27d402d049343dd&scene=21#wechat_redirect\"> Tomcat 处理</a>的话 Tomcat 的性能会被损耗很多，所以我们一般都是采用：Nginx+Tomcat 实现动静分离，让 Tomcat 只负责 jsp 文件的解析工作，Nginx 实现静态资源的访问。</p>\n<h2 id=\"2、调优-Tomcat-线程池\"><a href=\"#2、调优-Tomcat-线程池\" class=\"headerlink\" title=\"2、调优 Tomcat 线程池\"></a><strong>2、调优 Tomcat 线程池</strong></h2><p>打开tomcat的serve.xml，配置Executor，相关参数说明如下。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eaMr9cKHOkFXzBnBmNrYJk4srZOWxLd8fTj53XIwT5NhziaPiaA9FCBxw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>name</strong>：给执行器（线程池）起一个名字；</p>\n<p><strong>namePrefix</strong>：指定线程池中的每一个线程的 name 前缀；</p>\n<p><strong>maxThreads</strong>：线程池中最大的线程数量，假设请求的数量超过了 750，这将不是意味着将 maxThreads 属性值设置为 750，它的最好解决方案是使用「Tomcat集群」。也就是说，如果有 1000 请求，两个 Tomcat 实例设置 maxThreads = 500，而不在单 Tomcat 实例的情况下设置 maxThreads=1000。</p>\n<p><strong>minSpareThreads</strong>：<a href=\"http://mp.weixin.qq.com/s?__biz=MzU5NTAzNjM0Mw==&mid=2247485480&idx=3&sn=c95756a9ea720d73d35540e6791514d1&chksm=fe7959f0c90ed0e6c430895737a1f36bb6d3bf43c3bb3f548d3309ba5a6ef67bcc36e41f53ff&scene=21#wechat_redirect\">线程池中</a>允许空闲的线程数量（多余的线程都杀死）；</p>\n<p><strong>maxIdLeTime</strong>：一个线程空闲多久算是一个空闲线程；</p>\n<p>其他的配置其实阅读官方文档是最好的「见参考链接」。</p>\n<h2 id=\"3、调优-Tomcat-的连接器-Connector\"><a href=\"#3、调优-Tomcat-的连接器-Connector\" class=\"headerlink\" title=\"3、调优 Tomcat 的连接器 Connector\"></a><strong>3、调优 Tomcat 的连接器 Connector</strong></h2><p>打开 Tomcat 的 serve.xml，配置 Connector，参数说明如下。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eiaWjmYkqmFb0aasaAIuHJDJ3WcfrspyWmIetMibasv4ibjhWfmGGtXvmg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>executor：指定这个连接器所使用的执行器（线程池）；</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eDjrMWf0OAUl8zH8qCGK9TUPTQ7PxFvl2uCl8Uvh7ozcpTkAIk0gmPw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>enableLookups=false</strong>：关闭 DNS 解析，减少性能损耗；</p>\n<p><strong>minProcessors</strong>：服务器启动时创建的最少线程数；</p>\n<p><strong>maxProcessors</strong>：最大可以创建的线程数；</p>\n<p><strong>acceptCount=1000</strong>：线程池中的线程都被占用，允许放到队列中的请求数；</p>\n<p><strong>maxThreads=3000</strong>：最大线程数；</p>\n<p><strong>minSpareThreads=20</strong>：最小空闲线程数，这里是一直会运行的线程；</p>\n<p><strong>与压缩有关系的配置</strong>：如果已经对代码进行了动静分离，静态页面和图片等数据就不需要 Tomcat 处理了，那么也就不需要配置在 Tomcat 中配置压缩了；</p>\n<p>一个完整的配置如下。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eibbsMVvvy9OV0KHsobSIGoQbXbMyicXEke0ia2yiaoKfkrC0b9YhKBhZwA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h2 id=\"4、通过修改-Tomcat-的运行模式\"><a href=\"#4、通过修改-Tomcat-的运行模式\" class=\"headerlink\" title=\"4、通过修改 Tomcat 的运行模式\"></a><strong>4、通过修改 Tomcat 的运行模式</strong></h2><p><strong>BIO</strong></p>\n<p>Tomcat8 以下版本，默认使用的就是 BIO「<a href=\"http://mp.weixin.qq.com/s?__biz=MzU5NTAzNjM0Mw==&mid=2247484671&idx=2&sn=5f741a1c649d3fd1b1fd447f3ed5176b&chksm=fe795527c90edc31bfc1dacdc93443b66d493f9c8068da942a77f8edfdb15783e369d6545ae8&scene=21#wechat_redirect\">阻塞式IO</a>)」模式。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eP8DnfFuLR00yoz9vbfeYsOY2ayfFhVz27NytfpkYPccthSgvTATjuA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>对于每一个请求都要创建一个线程来进行处理，不适合高并发。</p>\n<p><strong>NIO</strong></p>\n<p>Tomcat8 以上版本，默认使用的就是NIO模式「非阻塞式 IO」。</p>\n<p><strong>APR</strong></p>\n<p>全称 Apache Portable Runtime，是Tomcat生产环境运行的首选方式，如果操作系统未安装 APR 或者 APR 路径未指到<a href=\"http://mp.weixin.qq.com/s?__biz=MzU5NTAzNjM0Mw==&mid=2247485545&idx=3&sn=ba1a4da11310d2e6e2bd6d817fe4695c&chksm=fe7959b1c90ed0a737adbb9d9475d4f4c7d04683249951448aa71b1266f01e80bdf135dd3cda&scene=21#wechat_redirect\"> Tomcat 默认</a>可识别的路径，则 APR 模式无法启动，自动切换启动 NIO 模式。所以必须要安装 APR 和 Native，直接启动就支持 APR，APR是从操作系统级别解决异步 IO 问题，APR 的本质就是使用 JNI 技术调用操作系统底层的 IO 接口，所以需要提前安装所需要的依赖</p>\n<p>提升 Tomcat 对静态文件的处理性能，当然也可以采用动静分离。</p>\n<h2 id=\"5、禁用-AJP-连接器\"><a href=\"#5、禁用-AJP-连接器\" class=\"headerlink\" title=\"5、禁用 AJP 连接器\"></a><strong>5、禁用 AJP 连接器</strong></h2><p>AJP的全称 Apache JServer Protocol，使用 Nginx+Tomca t的架构，所以用不着 AJP 协议，所以把AJP连接器禁用。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eeO43E3Qc1E0CpSNYj2UGfL3IekLPNFPnJC3ricickb26pOgDbHoJEKIw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><strong>三、JVM 调优</strong></p>\n<p>Tomcat 是运行在 JVM 上的，所以对 JVM 的调优也是非常有必要的。</p>\n<p>找到 catalina.sh；</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2e5Vn6VProqfpRggbTiah2jK6oh6CV3ib9pJEHo99ANOIzic9CZkBS9ndRA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>添加；</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/bcPwoCALib9Kq5ia9Pk8NVHhwxDARqSx2eib8js0Cw3GvGRc8fxO7aib1ria704xictV1s1ZVkcUpMhRnq0Z1VMtLiayw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>参数设置；</p>\n<blockquote>\n<p>JAVA_OPTS=”-Djava.awt.headless=true -Dfile.encoding=UTF-8-server -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m -XXermSize=512m -XX:MaxPermSize=512m -XX:+DisableExplicitGC”</p>\n</blockquote>\n<p>调整堆大小的的目的是最小化垃圾收集的时间，以在特定的时间内最大化处理客户的请求。</p>\n<p><strong>参考</strong></p>\n<p><a href=\"https://tomcat.apache.org/tomcat-8.0-doc/config/executor.html\">https://tomcat.apache.org/tomcat-8.0-doc/config/executor.html</a></p>\n<p><a href=\"https://tomcat.apache.org/tomcat-8.0-doc/config/index.html\">https://tomcat.apache.org/tomcat-8.0-doc/config/index.html</a></p>\n","feature":null,"text":"title: tomcat调优date: 2021-04-02 16:46:34tags: tomcat调优 一、描述最近，在补充自己的短板，刚好整理到 Tomcat 调优这块，基本上面试必问，于是就花了点时间去搜集一下 Tomcat 调优都调了些什么，先记录一下调优手段，更多详...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#title-tomcat%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">title: tomcat调优</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">一、描述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81Tomcat%E7%9A%84%E8%87%AA%E8%BA%AB%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">1、Tomcat的自身调优</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81JVM%E7%9A%84%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">2、JVM的调优</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81Tomcat-%E8%87%AA%E8%BA%AB%E8%B0%83%E4%BC%98\"><span class=\"toc-text\">二、Tomcat 自身调优</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%87%87%E7%94%A8%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB\"><span class=\"toc-text\">1、采用动静分离</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E8%B0%83%E4%BC%98-Tomcat-%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">2、调优 Tomcat 线程池</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81%E8%B0%83%E4%BC%98-Tomcat-%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%99%A8-Connector\"><span class=\"toc-text\">3、调优 Tomcat 的连接器 Connector</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9-Tomcat-%E7%9A%84%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">4、通过修改 Tomcat 的运行模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5%E3%80%81%E7%A6%81%E7%94%A8-AJP-%E8%BF%9E%E6%8E%A5%E5%99%A8\"><span class=\"toc-text\">5、禁用 AJP 连接器</span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"jvm调优","uid":"328c6de9a77c60ec489332ea5bf01cac","slug":"jvm调优","date":"2021-04-02T08:49:16.000Z","updated":"2021-04-02T09:20:01.995Z","comments":true,"path":"api/articles/jvm调优.json","keywords":null,"cover":[],"text":"一、JVM内存调优 对JVM内存的系统级的调优主要的目的是减少GC的频率和Full GC的次数。 1.Full GC 会对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个堆进行回收，所以比较慢，因此应该尽可能减少Full GC的次数。 2.导...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"jvm调优","slug":"jvm调优","count":1,"path":"api/tags/jvm调优.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Linux性能调优","uid":"94cb37335dcf3a428e4a1d020fa13c9d","slug":"Linux性能调优","date":"2021-04-02T08:20:57.000Z","updated":"2021-04-02T08:46:07.203Z","comments":true,"path":"api/articles/Linux性能调优.json","keywords":null,"cover":[],"text":"一、前提我们可以在文章的开始就列出一个列表，列出可能影响Linux操作系统性能的一些调优参数，但这样做其实并没有什么价值。因为性能调优是一个非常困难的任务，它要求对硬件、操作系统、和应用都有着相当深入的了解。如果性能调优非常简单的话，那些我们要列出的调优参数早就写入硬件的微码或者...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}