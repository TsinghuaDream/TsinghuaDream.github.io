{"title":"灰度发布","uid":"b1e76cb133a3f81cc5267f0d9f1ef90a","slug":"灰度发布","date":"2021-03-23T07:13:43.000Z","updated":"2021-04-07T08:37:19.076Z","comments":true,"path":"api/articles/灰度发布.json","keywords":null,"cover":null,"content":"<h1 id=\"1-什么是灰度发布\"><a href=\"#1-什么是灰度发布\" class=\"headerlink\" title=\"1.什么是灰度发布\"></a>1.什么是灰度发布</h1><p>​        灰度发布是指A/B testing,即让一部分用户继续用产品特性a，一部分开始用产品特性b,如果用户对b没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到b上面。</p>\n<h1 id=\"2-灰度发布流程\"><a href=\"#2-灰度发布流程\" class=\"headerlink\" title=\"2.灰度发布流程\"></a>2.灰度发布流程</h1><p>![image-20210323154759087](/Users/kingboom/Library/Application Support/typora-user-images/image-20210323154759087.png)</p>\n<p>相关解释：</p>\n<p>​        选定策略：包括用户规模、发布频率、功能覆盖率、回滚策略、运营策略、新旧系统部署策略等；</p>\n<p>​        筛选用户：包括用户特征、用户数量、用户常用功能、用户范围等</p>\n<p>​        部署系统：部署新系统、部署用户行为分析系统、设定分流规则、运营数据分析、分流规则微调</p>\n<p>​        发布总结：用户行为分析报告、用户问卷调查、社会化媒体意见收集、形成产品功能改进列表 </p>\n<h1 id=\"3-Eureka实现灰度发布（优雅下线）\"><a href=\"#3-Eureka实现灰度发布（优雅下线）\" class=\"headerlink\" title=\"3.Eureka实现灰度发布（优雅下线）\"></a>3.Eureka实现灰度发布（优雅下线）</h1><ol>\n<li><p>直接停掉服务。</p>\n<p>​        默认情况下，如果Eureka Server在90秒没有收到Eureka客户的续约，它会将实例从其注册表中删除。但这种做法的不好之处在于， 客户端已经停止了运行，但仍然在注册中心的列表中。 虽然通过一定的负载均衡策略或使用熔断器可以让服务正常进行，但有没有方法让注册中心马上知道服务已经下线呢？</p>\n</li>\n<li><p>为了让注册中心马上知道服务要下线，可以向euraka注册中心发送delete请求</p>\n<pre><code>    格式为/eureka/apps/&#123;application.name&#125;\n</code></pre>\n</li>\n<li><p>客户端主动通知注册中心下线</p>\n<p>​        如果你的eureka客户端是是一个spring boot应用，可以通过调用以下代码通知注册中心下线。 </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">DiscoveryManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shutdownComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DiscoveryClient</span> client<span class=\"token punctuation\">;</span>\n \n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span></span> instances <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getInstances</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello-service\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/offline\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">DiscoveryManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shutdownComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","feature":null,"text":"1.什么是灰度发布​ 灰度发布是指A/B testing,即让一部分用户继续用产品特性a，一部分开始用产品特性b,如果用户对b没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到b上面。 2.灰度发布流程![image-20210323154759087](/Users/kin...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"categories","slug":"categories","count":1,"path":"api/categories/categories.json"}],"tags":[{"name":"linux运维","slug":"linux运维","count":1,"path":"api/tags/linux运维.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%BB%80%E4%B9%88%E6%98%AF%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83\"><span class=\"toc-text\">1.什么是灰度发布</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.灰度发布流程</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-Eureka%E5%AE%9E%E7%8E%B0%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83%EF%BC%88%E4%BC%98%E9%9B%85%E4%B8%8B%E7%BA%BF%EF%BC%89\"><span class=\"toc-text\">3.Eureka实现灰度发布（优雅下线）</span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"设计模式","date":"2021-03-23T08:15:09.000Z","updated":"2021-03-29T00:38:07.182Z","comments":true,"path":"api/articles/设计模式.json","keywords":null,"cover":[],"text":"设计模式概述设计模式代表了最佳的实践，通常被有经验的面相对象的软件开发人员所采用。 设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多 软件开大人员经过相当长的一段时间的试验和错误总结出来的。 我的个人总结：工厂模式即是构建接口 利用继承构建多类，...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"To be God","slug":"To-be-God","count":1,"path":"api/tags/To-be-God.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据库连接池（jdbc）","uid":"997fa7c1b5358f16e6c47f75508528f9","slug":"JDBC连接池&JDBCTemplate课堂笔记","date":"2021-03-23T04:00:16.000Z","updated":"2021-03-29T06:18:03.610Z","comments":true,"path":"api/articles/JDBC连接池&JDBCTemplate课堂笔记.json","keywords":null,"cover":null,"text":"今日内容1. 数据库连接池 2. Spring JDBC : JDBC Template 数据库连接池1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":2,"path":"api/tags/数据库.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}