{"title":"Spring Boot 总结","uid":"2f6fa7c456d90ea78f2273a18fcc64b4","slug":"Spring Boot课堂笔记","date":"2021-03-23T04:00:16.000Z","updated":"2021-03-29T00:35:25.235Z","comments":true,"path":"api/articles/Spring Boot课堂笔记.json","keywords":null,"cover":[],"content":"<h2 id=\"1-Spring-Boot概述\"><a href=\"#1-Spring-Boot概述\" class=\"headerlink\" title=\"1. Spring Boot概述\"></a>1. Spring Boot概述</h2><p><strong>目标</strong>：了解Spring Boot是什么，有什么作用</p>\n<p><strong>小结</strong>：</p>\n<p>Spring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；实现开发人员把时间都集中在业务开发上。</p>\n<h2 id=\"2-Spring-Boot入门\"><a href=\"#2-Spring-Boot入门\" class=\"headerlink\" title=\"2. Spring Boot入门\"></a>2. Spring Boot入门</h2><p><strong>目标</strong>：能够使用Spring Boot搭建项目</p>\n<p><strong>分析</strong>：</p>\n<p>需求：可以在浏览器中访问<a href=\"http://localhost:8080/hello%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6\">http://localhost:8080/hello输出一串字符</a></p>\n<p>实现步骤：</p>\n<ol>\n<li>创建工程；</li>\n<li>添加依赖（启动器依赖，spring-boot-starter-web）；</li>\n<li>创建启动类；</li>\n<li>创建处理器Controller；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>Spring Boot工程可以通过添加启动器依赖和创建启动引导类实现快速创建web工程。</p>\n<blockquote>\n<p>spring-boot-starter-web默认的应用服务器端口是8080</p>\n</blockquote>\n<h2 id=\"3-Java代码方式配置\"><a href=\"#3-Java代码方式配置\" class=\"headerlink\" title=\"3. Java代码方式配置\"></a>3. Java代码方式配置</h2><p><strong>目标</strong>：可以使用@Value获取配置文件配置项并结合@Bean注册组件到Spring</p>\n<p><strong>分析</strong>：</p>\n<p>需求：使用Java代码配置数据库连接池，并可以在处理器中注入并使用</p>\n<p>步骤：</p>\n<ol>\n<li>添加依赖；</li>\n<li>创建数据库；</li>\n<li>创建数据库连接参数的配置文件jdbc.properties；</li>\n<li>创建配置类；</li>\n<li>改造处理器类注入数据源并使用</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PropertySource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:jdbc.properties\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcConfig</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.driverClassName&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> driverClassName<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.username&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.password&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">DruidDataSource</span> dataSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span>driverClassName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dataSource<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-Spring-Boot属性注入方式\"><a href=\"#4-Spring-Boot属性注入方式\" class=\"headerlink\" title=\"4. Spring Boot属性注入方式\"></a>4. Spring Boot属性注入方式</h2><p><strong>目标</strong>：能够使用@ConfigurationProperties实现Spring Boot配置文件配置项读取和应用</p>\n<p><strong>分析</strong>：</p>\n<p>需求：将配置文件中的配置项读取到一个对象中；</p>\n<p>实现：可以使用Spring Boot提供的注解@ConfigurationProperties，该注解可以将Spring Boot的配置文件（默认必须为application.properties或application.yml）中的配置项读取到一个对象中。</p>\n<p>实现步骤：</p>\n<ol>\n<li>创建配置项类JdbcProperties类，在该类名上面添加@ConfigurationProperties；</li>\n<li>将jdbc.properties修改名称为application.properties；</li>\n<li>将JdbcProperties对象注入到JdbcConfig；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>使用@ConfigurationProperties编写配置项类将配置文件中的配置项设置到对象中</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JdbcProperties</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> driverClassName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUrl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> url<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> driverClassName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDriverClassName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> driverClassName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>driverClassName <span class=\"token operator\">=</span> driverClassName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<ul>\n<li>使用@ConfigurationProperties在方法上面使用</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"jdbc\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DruidDataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"5-多个yml文件配置\"><a href=\"#5-多个yml文件配置\" class=\"headerlink\" title=\"5. 多个yml文件配置\"></a>5. 多个yml文件配置</h2><p><strong>目标</strong>：可以将多个yml文件在application.yml文件中配置激活</p>\n<p><strong>分析</strong>：</p>\n<p>yaml与properties配置文件除了展示形式不相同以外，其它功能和作用都是一样的；在项目中原路的读取方式不需要改变。</p>\n<p>1）yml配置文件的特征：</p>\n<ol>\n<li>树状层级结构展示配置项；</li>\n<li>配置项之间如果有关系的话需要分行空两格；</li>\n<li>配置项如果有值的话，那么需要在 <code>:</code>之后空一格再写配置项值；</li>\n</ol>\n<p>将application.properties配置文件修改为application.yml的话：</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">jdbc:\n  driverClassName: com.mysql.jdbc.Driver\n  url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;heima\n  username: root\n  password: root\n\nkey:\n  abc: cba\n  def:\n    - g\n    - h\n    - j<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>2）多个yml配置文件；在spring boot中是被允许的。这些配置文件的名称必须为application-***.yml，并且这些配置文件必须要在application.yml配置文件中激活之后才可以使用。</p>\n<p>3）如果properties和yml配置文件同时存在在spring boot项目中；那么这两类配置文件都有效。在两个配置文件中如果存在同名的配置项的话会以properties文件的为主。</p>\n<p><strong>小结</strong>：</p>\n<p>在多个配置文件时，需要将这些文件在application.yml文件中进行激活：</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">#激活配置文件;需要指定其它的配置文件名称\nspring:\n  profiles:\n    active: abc,def<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"6-自动配置原理\"><a href=\"#6-自动配置原理\" class=\"headerlink\" title=\"6. 自动配置原理\"></a>6. 自动配置原理</h2><p><strong>目标</strong>：了解Spring Boot项目的配置加载流程</p>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>在 <code>META-INF\\spring.fatories</code>文件中定义了很多自动配置类；可以根据在pom.xml文件中添加的 启动器依赖自动配置组件</li>\n<li>通过如下流程可以去修改application配置文件，改变自动配置的组件默认参数</li>\n</ul>\n<p><img src=\"/post/Spring%20Boot%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/1560091228494.png\" alt=\"1560091228494\"></p>\n<h2 id=\"7-lombok应用\"><a href=\"#7-lombok应用\" class=\"headerlink\" title=\"7. lombok应用\"></a>7. lombok应用</h2><p><strong>目标</strong>：使用lombok的注解实现pojo类的简化</p>\n<p><strong>分析</strong>：</p>\n<p>使用Spring Boot整合SSM工程；需要使用到数据库数据。</p>\n<ul>\n<li><p>将数据库表数据导入到数据库中（springboot_test）；</p>\n</li>\n<li><p>编写数据库表对应的实体类；一般情况下需要编写get/set/toString等这些方法会耗时并且会让实体类看起来比较臃肿。可以使用lombok插件对实体类进行简化。</p>\n<p>lombok是一个插件工具类包；提供了一些注解@Data、@Getter等这些注解去简化实体类中的构造方法、get/set等方法的编写。</p>\n<ol>\n<li>在IDEA中安装lombok插件；</li>\n<li>添加lombok对应的依赖到项目pom.xml文件；</li>\n<li>改造实体类使用lombok注解</li>\n</ol>\n</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<p>在Bean上使用：<br>@Data ：自动提供getter和setter、hashCode、equals、toString等方法<br>@Getter：自动提供getter方法<br>@Setter：自动提供setter方法<br>@Slf4j：自动在bean中提供log变量，其实用的是slf4j的日志功能。</p>\n<h2 id=\"8-Spring-Boot整合-SpringMVC端口和静态资源\"><a href=\"#8-Spring-Boot整合-SpringMVC端口和静态资源\" class=\"headerlink\" title=\"8. Spring Boot整合-SpringMVC端口和静态资源\"></a>8. Spring Boot整合-SpringMVC端口和静态资源</h2><p><strong>目标</strong>：可以修改tomcat的端口和访问项目中的静态资源</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>修改tomcat端口</p>\n<p>查询**Properties，设置配置项（前缀+类变量名）到application配置文件中</p>\n</li>\n<li><p>访问项目中的静态资源</p>\n<p>静态资源放置的位置；放置静态资源并访问这些资源</p>\n</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>修改项目tomcat端口：</li>\n</ul>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">#tomcat端口\nserver:\n  port: 80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>在spring boot项目中静态资源可以放置在如下目录：</p>\n<p><img src=\"/post/Spring%20Boot%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/1560096384799.png\" alt=\"1560096384799\"> </p>\n</li>\n</ul>\n<h2 id=\"9-Spring-Boot整合-SpringMVC拦截器\"><a href=\"#9-Spring-Boot整合-SpringMVC拦截器\" class=\"headerlink\" title=\"9.Spring Boot整合-SpringMVC拦截器\"></a>9.Spring Boot整合-SpringMVC拦截器</h2><p><strong>目标</strong>：可以在Spring Boot项目中配置自定义SpringMVC拦截器</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>编写拦截器（实现HandlerInterceptor）；</li>\n<li>编写配置类实现 WebMvcConfigurer，在该类中添加各种组件；</li>\n<li>测试</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>可以在spring boot项目中通过配置类添加各种组件；如果要添加拦截器的话：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>interceptor<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InterceptorRegistry</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcConfigurer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//注册拦截器</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token function\">myInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//添加拦截器到spring mvc拦截器链</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token function\">myInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"10-Spring-Boot整合-事务和连接池\"><a href=\"#10-Spring-Boot整合-事务和连接池\" class=\"headerlink\" title=\"10. Spring Boot整合-事务和连接池\"></a>10. Spring Boot整合-事务和连接池</h2><p><strong>目标</strong>：配置Spring Boot自带默认的hikari数据库连接池和使用@Transactional注解进行事务配置</p>\n<p><strong>分析</strong>：</p>\n<ul>\n<li><p>事务配置</p>\n<ol>\n<li>添加事务相关的启动器依赖，mysql相关依赖；</li>\n<li>编写业务类UserService使用事务注解@Transactional</li>\n</ol>\n</li>\n<li><p>数据库连接池hikari配置</p>\n<p>只需要在application配置文件中指定数据库相关参数</p>\n</li>\n</ul>\n<p><strong>小结</strong>：</p>\n<ul>\n<li>事务配置；只需要添加jdbc启动器依赖</li>\n<li>数据库连接池使用默认的hikari，在配置文件中配置如下：</li>\n</ul>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">spring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;springboot_test\n    username: root\n    password: root\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"11-Spring-Boot整合-Mybatis\"><a href=\"#11-Spring-Boot整合-Mybatis\" class=\"headerlink\" title=\"11. Spring Boot整合-Mybatis\"></a>11. Spring Boot整合-Mybatis</h2><p><strong>目标</strong>：配置Mybatis在Spring Boot工程中的整合包，设置mybatis的实体类别名，输出执行sql语句配置项</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>添加启动器依赖；</li>\n<li>配置Mybatis：实体类别名包，日志，映射文件等；</li>\n<li>配置MapperScan</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li><p>添加mybatis官方对于spring boot的一个启动器</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--mybatis --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis.spring.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置mybatis</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">mybatis:\n  # 实体类别名包路径\n  type-aliases-package: com.itheima.pojo\n  # 映射文件路径\n  # mapper-locations: classpath:mappers&#x2F;*.xml\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>设置启动器类中的mapper扫描</p>\n<p><img src=\"/post/Spring%20Boot%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/1560178298122.png\" alt=\"1560178298122\"> </p>\n</li>\n</ul>\n<h2 id=\"12-Spring-Boot整合-通用Mapper\"><a href=\"#12-Spring-Boot整合-通用Mapper\" class=\"headerlink\" title=\"12. Spring Boot整合-通用Mapper\"></a>12. Spring Boot整合-通用Mapper</h2><p><strong>目标</strong>：配置通用Mapper组件到Spring Boot项目中并使用Mapper<T>接口</T></p>\n<p><strong>分析</strong>：</p>\n<p>通用Mapper：可以实现自动拼接sql语句；所有的mapper都不需要编写任何方法也就是不用编写sql语句。可以提高开发效率。</p>\n<ol>\n<li>添加启动器依赖；</li>\n<li>改造UserMapper继承Mapper<User>；</User></li>\n<li>修改启动引导类Application中的Mapper扫描注解；</li>\n<li>修改User实体类添加jpa注解；</li>\n<li>改造UserService实现业务功能；</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<blockquote>\n<p>在启动引导类上面的mapper扫描注解 一定要修改为 通用mapper的扫描注解</p>\n</blockquote>\n<h2 id=\"13-Spring-Boot整合测试\"><a href=\"#13-Spring-Boot整合测试\" class=\"headerlink\" title=\"13. Spring Boot整合测试\"></a>13. Spring Boot整合测试</h2><p><strong>目标</strong>：可以访问处理器对应路径将数据库中的数据根据id查询</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>改造HelloController，注入UserService利用其方法实现查询；</li>\n<li>启动项目进行测试 <a href=\"http://localhost/user/%E7%94%A8%E6%88%B7id\">http://localhost/user/用户id</a> –&gt; <a href=\"http://localhost/user/8\">http://localhost/user/8</a></li>\n</ol>\n<p><strong>小结</strong>：</p>\n<p>修改了HelloController：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 根据用户id查询用户\n * @param id 用户id\n * @return 用户\n */</span>\n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"14-Spring-Boot整合-Junit\"><a href=\"#14-Spring-Boot整合-Junit\" class=\"headerlink\" title=\"14. Spring Boot整合-Junit\"></a>14. Spring Boot整合-Junit</h2><p><strong>目标</strong>：在Spring Boot项目中使用Junit进行单元测试UserService的方法</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>添加启动器依赖spring-boot-starter-test；</li>\n<li>编写测试类</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceTest</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserService</span> userService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span><span class=\"token number\">8L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user = \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span><span class=\"token function\">setCreated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        userService<span class=\"token punctuation\">.</span><span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>在Spring Boot项目中如果编写测试类则必须要在类上面添加@SpringBootTest</p>\n</blockquote>\n<h2 id=\"15-Spring-Boot整合-redis\"><a href=\"#15-Spring-Boot整合-redis\" class=\"headerlink\" title=\"15. Spring Boot整合-redis\"></a>15. Spring Boot整合-redis</h2><p><strong>目标</strong>：在Spring Boot项目中使用Junit测试RedisTemplate的使用</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>添加启动器依赖；spring-boot-starter-data-redis</li>\n<li>配置application.yml中修改redis的连接参数；（redis需要启动）</li>\n<li>编写测试类应用RedisTemplate操作redis中的5种数据类型（string/hash/list/set/sorted set）</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisTest</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//string 字符串</span>\n        <span class=\"token comment\">//redisTemplate.opsForValue().set(\"str\", \"heima\");</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundValueOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"heima\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str = \"</span> <span class=\"token operator\">+</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//hash 散列</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"heima\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取所有域</span>\n        <span class=\"token class-name\">Set</span> set <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" hash散列的所有域：\"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取所有值</span>\n        <span class=\"token class-name\">List</span> list <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" hash散列的所有域的值：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//list 列表</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundListOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftPush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundListOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftPush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundListOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftPush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取全部元素</span>\n        list <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundListOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" list列表中的所有元素：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// set 集合</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundSetOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundSetOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" set集合中的所有元素：\"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// sorted set 有序集合</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundZSetOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundZSetOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundZSetOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        set <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundZSetOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z_key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" zset有序集合中的所有元素：\"</span> <span class=\"token operator\">+</span> set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"16-Spring-Boot项目部署\"><a href=\"#16-Spring-Boot项目部署\" class=\"headerlink\" title=\"16. Spring Boot项目部署\"></a>16. Spring Boot项目部署</h2><p><strong>目标</strong>：将Spring Boot项目使用maven指令打成jar包并运行测试</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>需要添加打包组件将项目中的资源、配置、依赖包打到一个jar包中；可以使用maven的<code>package</code>；</li>\n<li>部署：java -jar 包名</li>\n</ol>\n<p><strong>小结</strong>：</p>\n<ul>\n<li><p>添加打包组件</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token comment\">&lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>部署运行</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">java -jar 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n","feature":null,"text":"1. Spring Boot概述目标：了解Spring Boot是什么，有什么作用 小结： Spring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；实现开发人员把时间都集中在业务开发上。 2...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Spring-Boot%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">1. Spring Boot概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Spring-Boot%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">2. Spring Boot入门</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Java%E4%BB%A3%E7%A0%81%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">3. Java代码方式配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-Spring-Boot%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4. Spring Boot属性注入方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%A4%9A%E4%B8%AAyml%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">5. 多个yml文件配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">6. 自动配置原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-lombok%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">7. lombok应用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-Spring-Boot%E6%95%B4%E5%90%88-SpringMVC%E7%AB%AF%E5%8F%A3%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">8. Spring Boot整合-SpringMVC端口和静态资源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-Spring-Boot%E6%95%B4%E5%90%88-SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">9.Spring Boot整合-SpringMVC拦截器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-Spring-Boot%E6%95%B4%E5%90%88-%E4%BA%8B%E5%8A%A1%E5%92%8C%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">10. Spring Boot整合-事务和连接池</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-Spring-Boot%E6%95%B4%E5%90%88-Mybatis\"><span class=\"toc-text\">11. Spring Boot整合-Mybatis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-Spring-Boot%E6%95%B4%E5%90%88-%E9%80%9A%E7%94%A8Mapper\"><span class=\"toc-text\">12. Spring Boot整合-通用Mapper</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-Spring-Boot%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">13. Spring Boot整合测试</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-Spring-Boot%E6%95%B4%E5%90%88-Junit\"><span class=\"toc-text\">14. Spring Boot整合-Junit</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-Spring-Boot%E6%95%B4%E5%90%88-redis\"><span class=\"toc-text\">15. Spring Boot整合-redis</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-Spring-Boot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">16. Spring Boot项目部署</span></a></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数据库（mysql）","uid":"1d53460b3441299b24ab126073336160","slug":"MySQL基础课堂笔记","date":"2021-03-23T04:00:16.000Z","updated":"2021-03-29T06:18:10.416Z","comments":true,"path":"api/articles/MySQL基础课堂笔记.json","keywords":null,"cover":null,"text":"今日内容 数据库的基本概念 MySQL数据库软件 安装 卸载 配置 SQL 数据库的基本概念1. 数据库的英文单词： DataBase 简称 ： DB 2. 什么数据库？ * 用于存储和管理数据的仓库。 3. 数据库的特点： 1. 持久化存储数据的。其实数据库就是一个文件系统 2...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":2,"path":"api/tags/数据库.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"新建md文件命令","uid":"752df47e81765b87f1a3577b1a4bb212","slug":"新建md文件","date":"2021-03-23T04:00:16.000Z","updated":"2021-03-29T06:18:33.678Z","comments":true,"path":"api/articles/新建md文件.json","keywords":null,"cover":null,"text":"新建md‘$ hexo new “title”‘ ","link":"","photos":[],"count_time":{"symbolsCount":25,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}