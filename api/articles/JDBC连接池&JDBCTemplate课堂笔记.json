{"title":"数据库连接池（jdbc）","uid":"997fa7c1b5358f16e6c47f75508528f9","slug":"JDBC连接池&JDBCTemplate课堂笔记","date":"2021-03-23T04:00:16.000Z","updated":"2021-03-29T06:18:03.610Z","comments":true,"path":"api/articles/JDBC连接池&JDBCTemplate课堂笔记.json","keywords":null,"cover":null,"content":"<h1 id=\"今日内容\"><a href=\"#今日内容\" class=\"headerlink\" title=\"今日内容\"></a>今日内容</h1><pre><code>1. 数据库连接池\n\n\n2. Spring JDBC : JDBC Template\n</code></pre>\n<h2 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h2><pre><code>1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。\n        当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。\n\n2. 好处：\n    1. 节约资源\n    2. 用户访问高效\n\n3. 实现：\n    1. 标准接口：DataSource   javax.sql包下的\n        1. 方法：\n            * 获取连接：getConnection()\n            * 归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接\n\n    2. 一般我们不去实现它，有数据库厂商来实现\n        1. C3P0：数据库连接池技术\n        2. Druid：数据库连接池实现技术，由阿里巴巴提供的\n\n\n4. C3P0：数据库连接池技术\n    * 步骤：\n        1. 导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，\n            * 不要忘记导入数据库驱动jar包\n        2. 定义配置文件：\n            * 名称： c3p0.properties 或者 c3p0-config.xml\n            * 路径：直接将文件放在src目录下即可。\n\n        3. 创建核心对象 数据库连接池对象 ComboPooledDataSource\n        4. 获取连接： getConnection\n    * 代码：\n         //1.创建数据库连接池对象\n        DataSource ds  = new ComboPooledDataSource();\n        //2. 获取连接对象\n        Connection conn = ds.getConnection();\n5. Druid：数据库连接池实现技术，由阿里巴巴提供的\n    1. 步骤：\n        1. 导入jar包 druid-1.0.9.jar\n        2. 定义配置文件：\n            * 是properties形式的\n            * 可以叫任意名称，可以放在任意目录下\n        3. 加载配置文件。Properties\n        4. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory\n        5. 获取连接：getConnection\n    * 代码：\n         //3.加载配置文件\n        Properties pro = new Properties();\n        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);\n        pro.load(is);\n        //4.获取连接池对象\n        DataSource ds = DruidDataSourceFactory.createDataSource(pro);\n        //5.获取连接\n        Connection conn = ds.getConnection();\n    2. 定义工具类\n        1. 定义一个类 JDBCUtils\n        2. 提供静态代码块加载配置文件，初始化连接池对象\n        3. 提供方法\n            1. 获取连接方法：通过数据库连接池获取连接\n            2. 释放资源\n            3. 获取连接池的方法\n\n\n    * 代码：\n        public class JDBCUtils &#123;\n\n            //1.定义成员变量 DataSource\n            private static DataSource ds ;\n        \n            static&#123;\n                try &#123;\n                    //1.加载配置文件\n                    Properties pro = new Properties();\n                    pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));\n                    //2.获取DataSource\n                    ds = DruidDataSourceFactory.createDataSource(pro);\n                &#125; catch (IOException e) &#123;\n                    e.printStackTrace();\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        \n            /**\n             * 获取连接\n             */\n            public static Connection getConnection() throws SQLException &#123;\n                return ds.getConnection();\n            &#125;\n        \n            /**\n             * 释放资源\n             */\n            public static void close(Statement stmt,Connection conn)&#123;\n               /* if(stmt != null)&#123;\n                    try &#123;\n                        stmt.close();\n                    &#125; catch (SQLException e) &#123;\n                        e.printStackTrace();\n                    &#125;\n                &#125;\n        \n                if(conn != null)&#123;\n                    try &#123;\n                        conn.close();//归还连接\n                    &#125; catch (SQLException e) &#123;\n                        e.printStackTrace();\n                    &#125;\n                &#125;*/\n        \n               close(null,stmt,conn);\n            &#125;\n</code></pre>\n<p>​<br>​                public static void close(ResultSet rs , Statement stmt, Connection conn){</p>\n<p>​<br>​                    if(rs != null){<br>​                        try {<br>​                            rs.close();<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }<br>​                    }</p>\n<p>​<br>​                    if(stmt != null){<br>​                        try {<br>​                            stmt.close();<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }<br>​                    }<br>​<br>​                    if(conn != null){<br>​                        try {<br>​                            conn.close();//归还连接<br>​                        } catch (SQLException e) {<br>​                            e.printStackTrace();<br>​                        }<br>​                    }<br>​                }<br>​<br>                /**<br>                 * 获取连接池方法<br>                 */</p>\n<pre><code>            public static DataSource getDataSource()&#123;\n                return  ds;\n            &#125;\n        \n        &#125;\n</code></pre>\n<h2 id=\"Spring-JDBC\"><a href=\"#Spring-JDBC\" class=\"headerlink\" title=\"Spring JDBC\"></a>Spring JDBC</h2><pre><code>* Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发\n* 步骤：\n    1. 导入jar包\n    2. 创建JdbcTemplate对象。依赖于数据源DataSource\n        * JdbcTemplate template = new JdbcTemplate(ds);\n\n    3. 调用JdbcTemplate的方法来完成CRUD的操作\n        * update():执行DML语句。增、删、改语句\n        * queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合\n            * 注意：这个方法查询的结果集长度只能是1\n        * queryForList():查询结果将结果集封装为list集合\n            * 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中\n        * query():查询结果，将结果封装为JavaBean对象\n            * query的参数：RowMapper\n                * 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装\n                * new BeanPropertyRowMapper&lt;类型&gt;(类型.class)\n        * queryForObject：查询结果，将结果封装为对象\n            * 一般用于聚合函数的查询\n\n    4. 练习：\n        * 需求：\n            1. 修改1号数据的 salary 为 10000\n            2. 添加一条记录\n            3. 删除刚才添加的记录\n            4. 查询id为1的记录，将其封装为Map集合\n            5. 查询所有记录，将其封装为List\n            6. 查询所有记录，将其封装为Emp对象的List集合\n            7. 查询总记录数\n\n        * 代码：\n            \n            import cn.itcast.domain.Emp;\n            import cn.itcast.utils.JDBCUtils;\n            import org.junit.Test;\n            import org.springframework.jdbc.core.BeanPropertyRowMapper;\n            import org.springframework.jdbc.core.JdbcTemplate;\n            import org.springframework.jdbc.core.RowMapper;\n            \n            import java.sql.Date;\n            import java.sql.ResultSet;\n            import java.sql.SQLException;\n            import java.util.List;\n            import java.util.Map;\n            \n            public class JdbcTemplateDemo2 &#123;\n            \n                //Junit单元测试，可以让方法独立执行\n</code></pre>\n<p>​<br>​                    //1. 获取JDBCTemplate对象<br>​                    private JdbcTemplate template = new JdbcTemplate(JDBCUtils.getDataSource());<br>​                    /**<br>​                     * 1. 修改1号数据的 salary 为 10000<br>​                     <em>/<br>​                    @Test<br>​                    public void test1(){<br>​<br>​                        //2. 定义sql<br>​                        String sql = “update emp set salary = 10000 where id = 1001”;<br>​                        //3. 执行sql<br>​                        int count = template.update(sql);<br>​                        System.out.println(count);<br>​                    }<br>​<br>                    /*</em><br>                     * 2. 添加一条记录<br>                     */<br>                    @Test<br>                    public void test2(){<br>                        String sql = “insert into emp(id,ename,dept_id) values(?,?,?)”;<br>                        int count = template.update(sql, 1015, “郭靖”, 10);<br>                        System.out.println(count);</p>\n<pre><code>                &#125;\n            \n                /**\n                 * 3.删除刚才添加的记录\n                 */\n                @Test\n                public void test3()&#123;\n                    String sql = &quot;delete from emp where id = ?&quot;;\n                    int count = template.update(sql, 1015);\n                    System.out.println(count);\n                &#125;\n            \n                /**\n                 * 4.查询id为1001的记录，将其封装为Map集合\n                 * 注意：这个方法查询的结果集长度只能是1\n                 */\n                @Test\n                public void test4()&#123;\n                    String sql = &quot;select * from emp where id = ? or id = ?&quot;;\n                    Map&lt;String, Object&gt; map = template.queryForMap(sql, 1001,1002);\n                    System.out.println(map);\n                    //&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;\n            \n                &#125;\n            \n                /**\n                 * 5. 查询所有记录，将其封装为List\n                 */\n                @Test\n                public void test5()&#123;\n                    String sql = &quot;select * from emp&quot;;\n                    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);\n            \n                    for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;\n                        System.out.println(stringObjectMap);\n                    &#125;\n                &#125;\n            \n                /**\n                 * 6. 查询所有记录，将其封装为Emp对象的List集合\n                 */\n            \n                @Test\n                public void test6()&#123;\n                    String sql = &quot;select * from emp&quot;;\n                    List&lt;Emp&gt; list = template.query(sql, new RowMapper&lt;Emp&gt;() &#123;\n            \n                        @Override\n                        public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;\n                            Emp emp = new Emp();\n                            int id = rs.getInt(&quot;id&quot;);\n                            String ename = rs.getString(&quot;ename&quot;);\n                            int job_id = rs.getInt(&quot;job_id&quot;);\n                            int mgr = rs.getInt(&quot;mgr&quot;);\n                            Date joindate = rs.getDate(&quot;joindate&quot;);\n                            double salary = rs.getDouble(&quot;salary&quot;);\n                            double bonus = rs.getDouble(&quot;bonus&quot;);\n                            int dept_id = rs.getInt(&quot;dept_id&quot;);\n            \n                            emp.setId(id);\n                            emp.setEname(ename);\n                            emp.setJob_id(job_id);\n                            emp.setMgr(mgr);\n                            emp.setJoindate(joindate);\n                            emp.setSalary(salary);\n                            emp.setBonus(bonus);\n                            emp.setDept_id(dept_id);\n            \n                            return emp;\n                        &#125;\n                    &#125;);\n</code></pre>\n<p>​<br>​                        for (Emp emp : list) {<br>​                            System.out.println(emp);<br>​                        }<br>​                    }<br>​<br>​                    /**<br>​                     * 6. 查询所有记录，将其封装为Emp对象的List集合<br>​                     */<br>​<br>                    @Test<br>                    public void test6_2(){<br>                        String sql = “select * from emp”;<br>                        List<Emp> list = template.query(sql, new BeanPropertyRowMapper<Emp>(Emp.class));<br>                        for (Emp emp : list) {<br>                            System.out.println(emp);<br>                        }<br>                    }</Emp></Emp></p>\n<pre><code>                /**\n                 * 7. 查询总记录数\n                 */\n            \n                @Test\n                public void test7()&#123;\n                    String sql = &quot;select count(id) from emp&quot;;\n                    Long total = template.queryForObject(sql, Long.class);\n                    System.out.println(total);\n                &#125;\n            \n            &#125;\n</code></pre>\n","feature":null,"text":"今日内容1. 数据库连接池 2. Spring JDBC : JDBC Template 数据库连接池1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。 当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":2,"path":"api/tags/数据库.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8A%E6%97%A5%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">今日内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0\"><span class=\"toc-text\">数据库连接池</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-JDBC\"><span class=\"toc-text\">Spring JDBC</span></a></li></ol></li></ol>","author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"灰度发布","uid":"b1e76cb133a3f81cc5267f0d9f1ef90a","slug":"灰度发布","date":"2021-03-23T07:13:43.000Z","updated":"2021-04-07T08:37:19.076Z","comments":true,"path":"api/articles/灰度发布.json","keywords":null,"cover":null,"text":"1.什么是灰度发布​ 灰度发布是指A/B testing,即让一部分用户继续用产品特性a，一部分开始用产品特性b,如果用户对b没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到b上面。 2.灰度发布流程![image-20210323154759087](/Users/kin...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"categories","slug":"categories","count":1,"path":"api/categories/categories.json"}],"tags":[{"name":"linux运维","slug":"linux运维","count":1,"path":"api/tags/linux运维.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据库（mysql）","uid":"1d53460b3441299b24ab126073336160","slug":"MySQL基础课堂笔记","date":"2021-03-23T04:00:16.000Z","updated":"2021-03-29T06:18:10.416Z","comments":true,"path":"api/articles/MySQL基础课堂笔记.json","keywords":null,"cover":null,"text":"今日内容 数据库的基本概念 MySQL数据库软件 安装 卸载 配置 SQL 数据库的基本概念1. 数据库的英文单词： DataBase 简称 ： DB 2. 什么数据库？ * 用于存储和管理数据的仓库。 3. 数据库的特点： 1. 持久化存储数据的。其实数据库就是一个文件系统 2...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"数据库","slug":"数据库","count":2,"path":"api/tags/数据库.json"}],"author":{"name":"Phoenix","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"我在天台抽着烟 我抽一半，风抽一半 我没和风计较 因为风也有自己的忧愁","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}